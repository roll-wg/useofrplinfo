<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [

<!ENTITY RFC6550 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6550.xml">
<!ENTITY RFC8138 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8138.xml">
<!ENTITY RFC8200 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8200.xml">
<!ENTITY RFC6553 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6553.xml">
<!ENTITY RFC6554 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6554.xml">
<!ENTITY RFC6040 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6040.xml">
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7102 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7102.xml">
<!ENTITY RFC4443 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4443.xml">
<!ENTITY RFC6775 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6775.xml">
<!ENTITY RFC2473 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2473.xml">
<!ENTITY RFC4302 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4302.xml">
<!ENTITY RFC4301 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4301.xml">
<!ENTITY RFC4303 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4303.xml">
<!ENTITY RFC7321 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7321.xml">
<!ENTITY RFC7416 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7416.xml">
<!ENTITY RFC8180 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8180.xml">
<!ENTITY RFC8505 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8505.xml">
<!ENTITY RFC2460 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2460.xml">
<!ENTITY RFC6437 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6437.xml">
]>
<!--  -->
<!--<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?> -->
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
    please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
    (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="no" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
    (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="std" docName="draft-ietf-roll-useofrplinfo-43" ipr="trust200902" updates="6553, 6550, 8138">
 <!-- category values: std, bcp, info, exp, and historic
    ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
       or pre5378Trust200902
    you can add the attributes updates="NNNN" and obsoletes="NNNN"
    they will automatically be output with "(if approved)" -->

 <!-- ***** FRONT MATTER ***** -->

 <front>
   <!-- The abbreviated title is used in the page header - it is only necessary if the
        full title is longer than 39 characters -->

   <title abbrev="RPL-data-plane">Using RPI Option Type, Routing Header for Source Routes and IPv6-in-IPv6 encapsulation in the RPL Data Plane</title>

  <author  initials="M.I." surname="Robles" fullname="Maria Ines Robles">
     <organization abbrev="UTN-FRM/Aalto">
Universidad Tecno. Nac.(UTN)-FRM, Argentina/ Aalto University Finland
     </organization>
    <address>

      <email>mariainesrobles@gmail.com</email>
    </address>
  </author>

  <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
    <organization abbrev="SSW">Sandelman Software Works</organization>
     <address>
        <postal>
        <street>470 Dawson Avenue</street>
        <city>Ottawa</city>
        <region>ON</region>
        <code>K1Z 5V7</code>
        <country>CA</country>
        </postal>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/mcr/</uri>
     </address>

  </author>
    <author initials="P" surname="Thubert" fullname="Pascal Thubert">
      <organization abbrev="Cisco">Cisco Systems, Inc</organization>
      <address>
         <postal>
            <street>Building D</street>
            <street>45 Allee des Ormes - BP1200 </street>
            <city>MOUGINS - Sophia Antipolis</city>
            <code>06254</code>
            <country>FRANCE</country>
         </postal>
         <phone>+33 497 23 26 34</phone>
         <email>pthubert@cisco.com</email>
      </address>
   </author>

  <date />

   <area>Internet</area>

   <workgroup>ROLL Working Group</workgroup>

   <keyword>RPL Option</keyword>
   <keyword>6LoWPAN</keyword>
   <keyword>RFC 6553</keyword>

   <abstract>
      <t>
        This document looks at different data flows through LLN (Low-Power and Lossy Networks) where RPL
        (IPv6 Routing Protocol for Low-Power and Lossy Networks) is used to establish routing.
        The document enumerates the cases where RFC6553 (RPI Option Type), RFC6554 (Routing Header for Source Routes)
        and IPv6-in-IPv6 encapsulation is required in data plane.
        This analysis provides the basis on which to design efficient compression of these headers.
        This document updates RFC6553 adding a change to the RPI Option Type. Additionally, this document updates
        RFC6550 defining a flag in the DIO Configuration option to indicate about this change and
        updates RFC8138 as well to consider the new Option Type when the RPL Option is decompressed.
      </t>
   </abstract>
 </front>

 <middle>
          <section title="Introduction">
             <t>
               RPL (IPv6 Routing Protocol for Low-Power and Lossy Networks)
               <xref target="RFC6550"/> is a routing protocol for
                constrained networks. <xref target="RFC6553"/>
                defines the RPL Option carried within the IPv6 Hop-by-Hop
                Header to carry the RPLInstanceID and quickly identify inconsistencies (loops) in the routing topology.
                The RPL Option is commonly referred to as the RPL Packet Information
                (RPI) though the RPI is the routing information that is defined
                in <xref target="RFC6550"/> and transported in the RPL Option.
                RFC6554 <xref target="RFC6554"/> defines the "RPL Source Route Header" (RH3), an
                IPv6 Extension Header to deliver datagrams within a RPL
                routing domain, particularly in non-storing mode.
            </t>
             <t>
                These various items are referred to as RPL artifacts, and
                they are seen on all of the data-plane traffic that occurs in
                RPL routed networks; they do not in general appear on the RPL
                control plane traffic at all which is mostly Hop-by-Hop
                traffic (one exception being DAO messages in non-storing mode).
             </t>
             <t>
               It has become clear from attempts to do multi-vendor
               interoperability, and from a desire to compress as many of
               the above artifacts as possible that not all implementers
               agree when artifacts are necessary, or when they can be safely
               omitted, or removed.
             </t>

             <t>
               The ROLL WG analyzed how <xref target="RFC2460" /> rules apply to storing and
               non-storing use of RPL.  The result was 24 data plane use
               cases.  They are exhaustively outlined here in order to be
               completely unambiguous.  During the processing of this
               document, new rules were published as
               <xref target="RFC8200"/>, and this document was updated
               to reflect the normative changes in that document.
             </t>
             <t>
               This document updates <xref target="RFC6553"/>, changing the value of the Option Type of the RPL Option
               to make <xref target="RFC8200"/> routers ignore this option when not recognized.
             </t>
             <t>
               A Routing Header Dispatch for 6LoWPAN (6LoRH)(<xref target="RFC8138" />)
                defines a mechanism for compressing RPL Option information and Routing Header type 3 (RH3)
                <xref target="RFC6554"/>, as well as an efficient IPv6-in-IPv6 technique.
             </t><t>
                Most of the use cases described herein require the use of IPv6-in-IPv6 packet encapsulation.
                When encapsulating and decapsulating packets, <xref target="RFC6040"/> MUST be applied to map the
                setting of the explicit congestion notification (ECN) field between inner and outer headers.
                Additionally, <xref target="I-D.ietf-intarea-tunnels"/> is recommended reading to explain
                the relationship of IP tunnels to existing protocol layers and the challenges
                in supporting IP tunneling.
              </t>
              <t>
                Non-constrained uses of RPL are not in scope of this document, and
                applicability statements for those uses may provide different
                advice, E.g. <xref target="I-D.ietf-anima-autonomic-control-plane" />.
              </t>
             <section title="Overview">
               <t>
               The rest of the document is organized as follows: Section 2 describes the used terminology.
               Section 3 provides a RPL Overview.
	       Section 4 describes the updates to RFC6553, RFC6550 and RFC 8138.
               Section 5 provides the reference topology used for the uses cases.
               Section 6  describes the use cases included.
               Section 7 describes the storing mode cases and section 8 the non-storing mode cases.
               Section 9 describes the operational considerations of supporting RPL-unaware-leaves.
               Section 10 depicts operational considerations for the proposed change on RPI Option Type, section 11 the
               IANA considerations and then section 12 describes the security
               aspects.
               </t>
             </section>
          </section>
    <section title="Terminology and Requirements Language">
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
        NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
        "MAY", and "OPTIONAL" in this document are to be interpreted as
        described in BCP 14
        <xref target="RFC2119" />
        <xref target="RFC8174" /> when, and only when, they
        appear in all capitals, as shown here.
      </t>
        <t>
        Terminology defined in <xref target="RFC7102"/> applies to this document: LLN, RPL, RPL domain and ROLL.
        </t>
        <t>
        Consumed: A Routing Header is consumed when the Segments Left field is zero, which indicates that the
        destination in the IPv6 header is the final destination of the packet and that the hops in the Routing Header
        have been traversed.
        </t>
        <t>
        RPL Leaf: An IPv6 host that is attached to a RPL router and obtains connectivity
        through a RPL Destination Oriented Directed Acyclic Graph (DODAG). As an IPv6 node,
        a RPL Leaf is expected to ignore a consumed Routing Header and as an IPv6 host, it
        is expected to ignore a Hop-by-Hop header. It results that a RPL Leaf can correctly
        receive a packet with RPL artifacts. On the other hand, a RPL Leaf is not expected
        to generate RPL artifacts or to support IP-in-IP encapsulation. For simplification,
        this document uses the standalone term leaf to mean a RPL leaf.
        </t>
        <t>
        RPL Packet Information (RPI):
        The information defined abstractly in <xref target="RFC6550"/> to be placed in IP packets.
        The term is commonly used, including in this document, to refer to the RPL Option <xref target="RFC6553"/>
        that transports that abstract information in an IPv6 Hop-by-Hop Header. <xref target="RFC8138"/> provides
        an alternate (more compressed) formating for the same abstract information.
        </t>
        <t>
        RPL-aware-node (RAN): A device which implements RPL. Please note that the device can be found inside the LLN or outside LLN.
        </t>
        <t>
        RPL-Aware-Leaf(RAL): A RPL-aware-node that is also a RPL Leaf.
        </t>
        <t>
        RPL-unaware-node: A device which does not implement RPL, thus the device is not-RPL-aware.
	      Please note that the device can be found inside the LLN.
        </t>
        <t>
        RPL-Unaware-Leaf(RUL): A RPL-unaware-node that is also a RPL Leaf.
        </t>

        <t>
	    6LoWPAN Node (6LN): <xref target="RFC6775"/> defines it as: "A 6LoWPAN node is any host or router participating in a LoWPAN.
      This term is used when referring to situations in which either a
      host or router can play the role described.". In this document, a 6LN acts as a leaf.
        </t>
        <t>
      6LoWPAN Router (6LR): <xref target="RFC6775"/> defines it as:" An intermediate router in the LoWPAN that is able to send and
      receive Router Advertisements (RAs) and Router Solicitations (RSs)
      as well as forward and route IPv6 packets.  6LoWPAN routers are
      present only in route-over topologies."
        </t>
        <t>
      6LoWPAN Border Router (6LBR): <xref target="RFC6775"/> defines it as:"A border router located at the junction of separate 6LoWPAN
      networks or between a 6LoWPAN network and another IP network.
      There may be one or more 6LBRs at the 6LoWPAN network boundary.  A
      6LBR is the responsible authority for IPv6 prefix propagation for
      the 6LoWPAN network it is serving.  An isolated LoWPAN also
      contains a 6LBR in the network, which provides the prefix(es) for
      the isolated network."
        </t>
        <t>
          Flag Day: A Flag Day is caused when a network is reconfigured in a way that nodes running the older configuration can not communicate with nodes running the new configuration.  For instance, when the ARPANET changed from IP version 3 to IP version 4 on January 1, 1983 (<xref target="RFC0801" />).
          In the context of this document, a switch from RPI Option Type (0x63) and Option Type (0x23) presents as a disruptive changeover.  In order to reduce the amount of time for such a changeover, <xref target="update6550" /> provides a mechanism to allow nodes to be incrementally upgraded.
        </t>
         <t>
           Non-Storing Mode (Non-SM): RPL mode of operation in which the RPL-
       aware-nodes send information to the root about their parents.  Thus, the root knows the topology.
       Because the root knows the topology, the intermediate 6LRs do not maintain routing state and
        source routing is needed.

       </t>
       <t>
        Storing Mode (SM): RPL mode of operation in which RPL-aware-nodes (6LRs) maintain routing
        state (of the children) so that source routing is not needed.
      </t> <t>
        Note: Due to lack of space in some figures (tables) we refer to IPv6-in-IPv6 as IP6-IP6.
      </t>
          </section>
      <section title="RPL Overview">
        <t>
        RPL defines the RPL Control messages (control plane), a new
        ICMPv6 <xref target="RFC4443"/>  message with Type 155.
        DIS (DODAG Information Solicitation), DIO (DODAG Information Object)
        and DAO (Destination Advertisement Object) messages are
        all RPL Control messages but with different Code values.
        A RPL Stack is shown in <xref target="fig_RPLStack"/>.
        </t>
        <t>
     <figure title="RPL Stack." anchor="fig_RPLStack" align="center">
        <artwork><![CDATA[
+--------------+
| Upper Layers |
|              |
+--------------+
|   RPL        |
|              |
+--------------+
|   ICMPv6     |
|              |
+--------------+
|   IPv6       |
|              |
+--------------+
|   6LoWPAN    |
|              |
+--------------+
|   PHY-MAC    |
|              |
+--------------+
        ]]></artwork></figure>
</t>
        <t>
        RPL supports two modes of Downward internal traffic: in storing mode (SM),
        it is fully stateful; in non-storing mode (Non-SM), it is fully source
        routed. A RPL Instance is either fully storing or fully
        non-storing, i.e. a RPL Instance with a combination of a fully
        storing and non-storing nodes is not supported with the
        current specifications at the time of writing this document.
        External routes are advertised with non-storing-mode messaging
        even in a storing mode network, see <xref target="nnstext"/>
        </t>


       </section>

       <section  anchor="updateRFCs_section" title="Updates to RFC6550, RFC6553 and RFC8138">


          <section  anchor="updateRFC_section6550" title="Updates to RFC6550">

          <section  anchor="nnstext" title="Advertising External Routes with Non-Storing Mode Signaling.">
          <t>
          Section 6.7.8. of <xref target="RFC6550"/> introduces the 'E' flag that
          is set to indicate that the 6LR that generates the DAO redistributes
          external targets into the RPL network.  An external Target is a Target
          that has been learned through an alternate protocol, for instance a
          route to a prefix that is outside the RPL domain but reachable via a
          6LR. Being outside of the RPL domain, a node that is reached via an
          external target cannot be guaranteed to ignore the RPL artifacts and
          cannot be expected to process the <xref target="RFC8138"/> compression
          correctly. This means that the RPL artifacts should be contained in an
          IP-in-IP encapsulation that is removed by the 6LR, and that any
          remaining compression should be expanded by the 6LR before it forwards
          a packet outside the RPL domain.
          </t><t>
          This specification updates <xref target="RFC6550"/> to RECOMMEND that
          external targets are advertised using Non-Storing Mode DAO messaging
          even in a Storing-Mode network. This way, external routes are not
          advertised within the DODAG and all packets to an external target
          reach the Root like normal Non-Storing Mode traffic. The Non-Storing
          Mode DAO informs the Root of the address of the 6LR that injects the
          external route, and the root uses IP-in-IP encapsulation to that 6LR,
          which terminates the IP-in-IP tunnel and forwards the original packet
          outside the RPL domain free of RPL artifacts.
          </t><t>
          In the other direction,
          for traffic coming from an external target into the LLN, the parent
          (6LR) that injects the traffic always encapsulates to the root.
          This whole operation is
          transparent to intermediate routers that only see traffic between the
          6LR and the Root, and only the Root and the 6LRs that inject external
          routes in the network need to be upgraded to add this function to the
          network.
          </t><t>
          A RUL is a special case of external target when the target is actually
          a host and it is known to support a consumed Routing Header and to
          ignore a Hop-by-Hop header as prescribed by <xref target="RFC8200"/>.
          The target may have been learned through an external routing protocol or may have
          been registered to the 6LR using <xref target="RFC8505"/>.
          </t><t>
          In order to enable IP-in-IP all the way to a 6LN, it is beneficial
          that the 6LN supports decapsulating IP-in-IP, but that is not assumed
          by <xref target="RFC8504"/>.
          If the 6LN is a RUL, the Root that encapsulates a packet SHOULD
          terminate the tunnel at a parent 6LR unless it is aware that the RUL
          supports IP-in-IP decapsulation.
         </t><t>

          A node that is reachable over an external route is not expected to
          support <xref target="RFC8138"/>. Whether a decapsulation took place
          or not and even when the 6LR is delivering the packet to a RUL, the
          6LR that injected an external route MUST uncompress the packet before
          forwarding over that external route.

          </t>
          </section>
          <section  anchor="mopchanges" title="Configuration Options and Mode
                                               of Operation">
            <t>
              Section 6.7.6 of RFC6550 describes the DODAG Configuration Option as
              containing a series of Flags in the first octet of the payload.
          </t>
          <t>
              Anticipating future work to revise RPL relating to how the LLN and DODAG
              are configured, this document renames the DODAG Configuration Option
              Flags registry so that it applies to Mode of Operation (MOP) values zero
              (0) to six (6) only, leaving the flags unassigned for MOP value seven
              (7).The MOP is described in RFC6550 section 6.3.1.
          </t>
            <t>
              In addition, this document reserves MOP value 7 for future expansion.
          </t>
          <t>
            See Sections 11.2 and 11.3.
          </t>
          </section>
          <section title="Indicating the new RPI in the
                          DODAG Configuration option Flag. " anchor="update6550">
          <t>
            In order to avoid a Flag Day caused by lack of interoperation
            between new RPI Option Type (0x23) and old RPI Option Type (0x63) nodes, this section
            defines a flag in the DIO Configuration option, to indicate when
            the new RPI Option Type can be safely used. This means, the flag is going
            to indicate the value of Option Type that the network will be using for the RPL Option. Thus, when a
            node joins to a network it will know which value to use.
            With this, RPL-capable nodes know if it is safe to use 0x23 when creating a new RPL Option.
            A node that forwards a packet with an RPI MUST NOT modify the Option Type of the RPL Option.
          </t>
            <t>
              This is done using a DODAG Configuration option flag which will
            signal "RPI 0x23 enable" and propagate through the network.
              Section 6.3.1. of <xref target="RFC6550"/> defines a 3-bit Mode of
              Operation (MOP) in the DIO Base Object. The flag is defined only
              for MOP value between 0 to 6.
            </t>
            <t>
              For a MOP value of 7, a node MUST use the RPI 0x23 option.
            </t>
            <t>
              As stated in <xref target="RFC6550"/> the DODAG Configuration option is present in DIO messages.
              The DODAG Configuration option distributes configuration
              information.  It is generally static, and does not change within
              the DODAG.
              This information is configured at the DODAG root and distributed
              throughout the DODAG with the DODAG Configuration option.
              Nodes other than the DODAG root do not modify this information when
              propagating the DODAG Configuration option.
            </t>
            <t>
              Currently, the DODAG Configuration option in <xref target="RFC6550"/> states:
              "the unused bits MUST be initialized to zero by the sender
               and MUST be ignored by the receiver".  If the flag is received with a
            value zero (which is the default), then new nodes will remain in
              RFC6553 Compatible Mode; originating traffic with the old-RPI Option Type (0x63) value.
              If the flag is received with a value of 1, then the value for the
              RPL Option MUST be set to 0x23.
            </t>
              <t>
             Bit number three of the flag field in the DODAG Configuration option
             is to be used as shown in <xref target="fig_RPIflagday2"/> (which is the same as <xref target="fig_RPIflagdayConfOption"/>
             in <xref target="iana"/> and is shown here for convenience):
            </t>
            <t>
          <figure title="DODAG Configuration option Flag to indicate the RPI-flag-day." anchor="fig_RPIflagday2" align="center">
             <artwork> <![CDATA[

               +------------+-----------------+---------------+
               | Bit number |   Description   |   Reference   |
               +------------+-----------------+---------------+
               |      3     | RPI 0x23 enable | This document |
               +------------+-----------------+---------------+

            ]]></artwork></figure>
            </t>
            <t>
              In the case of reboot, the node (6LN or 6LR) does not remember the
              RPI Option Type (i.e., whether or not the flag is set), so the node will not trigger DIO
              messages until a DIO message is received indicating the RPI
              value to be used. The node will use the value 0x23 if the network supports this feature.
            </t>
          </section>
          </section>
          <section title="Updates to RFC6553: Indicating the new RPI Option Type.">
          <t>
          This modification is required in order to be able to send, for example,
          IPv6 packets from a RPL-Aware-Leaf to a RPL-unaware node through Internet (see <xref target="sm-Ral2i" />),
          without requiring IPv6-in-IPv6 encapsulation.
          </t>
          <t>
          <xref target="RFC6553"/> (Section 6, Page 7) states as shown in <xref target="fig_RPIOption" />,
          that in the Option Type field of the RPL Option,
          the two high order bits must be set to '01' and the third bit is equal to '1'.
          The first two bits indicate that the IPv6 node must discard the packet
          if it doesn't recognize the Option Type,
          and the third bit indicates that the Option Data may change in route.
          The remaining bits serve as the Option Type.
          </t>
          <t>
          <figure title="Option Type in RPL Option." anchor="fig_RPIOption" align="center">
             <artwork> <![CDATA[
+-------+-------------------+----------------+-----------+
|  Hex  |    Binary Value   |   Description  | Reference |
+ Value +-------------------+                +           +
|       | act | chg |  rest |                |           |
+-------+-----+-----+-------+----------------+-----------+
|  0x63 |  01 |  1  | 00011 |   RPL Option   | [RFC6553] |
+-------+-----+-----+-------+----------------+-----------+
          ]]></artwork></figure>
          </t>
          <t>
          This document illustrates that it is not always possible to know for sure at the source that a packet will only travel within the RPL domain or may leave it.

          </t><t>
          At the time <xref target="RFC6553"/> was published, leaking a Hop-by-Hop header in the outer IPv6 header
          chain could potentially impact core routers in the internet. So at that time, it was decided to encapsulate
          any packet with a RPL Option using IPv6-in-IPv6 in all cases where it was unclear whether the packet would
          remain within the RPL domain. In the exception case where a packet would still leak, the Option Type would
          ensure that the first router in the Internet that does not recognize the option would drop the packet and
          protect the rest of the network.

          </t><t>
          Even with <xref target="RFC8138"/>, where the IPv6-in-IPv6 header is compressed, this approach yields extra bytes
          in a packet; this means consuming more energy, more bandwidth, incurring higher chances of loss and possibly
          causing a fragmentation at the 6LoWPAN level. This impacts the daily operation of constrained devices for a case
           that generally does not happen and would not heavily impact the core anyway.
          </t><t>

          While intention was and remains that the Hop-by-Hop header with a RPL Option should be confined within the
          RPL domain, this specification modifies this behavior in order to reduce the dependency on IPv6-in-IPv6 and
          protect the constrained devices. Section 4 of <xref target="RFC8200"/> clarifies the behaviour of routers in
          the Internet as follows: "it is now expected that nodes along a packet's delivery path only examine and process
          the Hop-by-Hop Options header if explicitly configured to do so".
          </t><t>
          When unclear about the travel of a packet, it becomes preferable for a source not to encapsulate, accepting
          the fact that the packet may leave the RPL domain on its way to its destination. In that event, the packet
          should reach its destination and should not be discarded by the first node that does not recognize the RPL Option.
           But with the current value of the Option Type, if a node in the Internet is configured to process the Hop-by-Hop
           header, and if such node encounters an option with the first two bits set to 01 and conforms to <xref target="RFC8200"/>,
            it will drop the packet. Host systems should do the same, irrespective of the configuration.
          </t>
          <t>
           Thus, this document updates the Option Type of the RPL Option <xref target="RFC6553"/>,
           naming it RPI Option Type for simplicity,
           to (<xref target="fig_RPIOption_new"/>):
           the two high order bits MUST be set to '00'
           and the third bit is equal to '1'.
           The first two bits indicate that the IPv6 node MUST
           skip over this option and continue processing the header
           (<xref target="RFC8200"/> Section 4.2)
           if it doesn't recognize the Option Type,
           and the third bit continues to be set to indicate that the Option
           Data may change en route. The rightmost five bits remain at 0x3(00011).
           This ensures that a packet that leaves the RPL domain of an LLN (or that
           leaves the LLN entirely) will not be discarded when it contains the RPL Option.
          </t>
          <t>
          With the new Option Type, if an IPv6 (intermediate) node (RPL-not-capable) receives a packet with a
          RPL Option, it should ignore the Hop-by-Hop RPL Option
          (skip over this option and continue processing the header). This is relevant, as it was mentioned previously, in the case that
          there is a flow from RAL to Internet (see <xref target="sm-Ral2i" />).
          </t>
          <t>
           This is a significant update to <xref target="RFC6553"/>.
          </t>
          <t>
          <figure title="Revised Option Type in RPL Option. (*)represents this document" anchor="fig_RPIOption_new" align="center">
             <artwork> <![CDATA[
+-------+-------------------+-------------+------------+
|  Hex  |    Binary Value   | Description | Reference  |
+ Value +-------------------+             +            +
|       | act | chg |  rest |             |            |
+-------+-----+-----+-------+-------------+------------+
|  0x23 |  00 |  1  | 00011 |  RPL Option |[RFCXXXX](*)|
+-------+-----+-----+-------+-------------+------------+
          ]]></artwork></figure>
          </t>
          <t>
            Without the signaling described below, this change would otherwise create a lack of interoperation (flag day) for existing networks which are
            currently using 0x63 as the RPI Option Type value.  A move to 0x23 will not
            be understood by those networks.  It is suggested that
            RPL implementations accept both 0x63 and 0x23 when
            processing the header.
          </t>
          <t>
            When forwarding packets, implementations SHOULD use the same value of RPI Type
            as was received. This is required because the RPI Option Type does not change en route
            (<xref target="RFC8200"/> - Section 4.2). It allows the network to be incrementally
            upgraded and allows the DODAG root to know which parts of the
            network have been upgraded.
          </t>
          <t>
            When originating new packets,
            implementations should have an option to determine which value to
            originate with, this option is controlled by the DIO Configuration option (Section <xref target="update6550"/>).
          </t>
          <!--
          A network which is switching from straight 6LoWPAN compression
          mechanism to those described in
          <xref target="RFC8138" />
          will experience a flag day in the data compression anyway, and if
          possible this change can be deployed at the same time.
        </t-->
        <t>
          The change of RPI Option Type from 0x63 to 0x23, makes all
          <xref target="RFC8200"/> Section 4.2 compliant nodes tolerant of the RPL artifacts.  There
          is no longer a need to remove the artifacts when
          sending traffic to the Internet.  This change clarifies when
          to use IPv6-in-IPv6 headers, and how to address them:
          The Hop-by-Hop Options header containing the RPI MUST always
          be added when 6LRs originate packets (without IPv6-in-IPv6
          headers), and IPv6-in-IPv6 headers MUST always be added
          when a 6LR finds that it needs to insert a Hop-by-Hop Options header
          containing the RPL Option. The IPv6-in-IPv6 header is to
          be addressed to the
          RPL root when on the way up, and to the end-host when on the way down.
        </t>

        <t>
          In the non-storing case, dealing with not-RPL aware leaf nodes
          is much easier as the 6LBR (DODAG root) has complete knowledge
          about the connectivity of all DODAG nodes, and all traffic flows
          through the root node.
        </t>
        <t>
          The 6LBR can recognize not-RPL aware leaf nodes because it will
          receive a DAO about that node from the 6LR immediately above that
          not-RPL aware node.
        </t>
        <t>
          The non-storing mode case does not require the type change from
          0x63 to 0x23, as the root can always create the right packet.
          The type change does not adversely affect the non-storing case.(see  <xref target="update6550"/>)
        </t>

<!--        <t>
          In general, any packet that leaves the RPL domain
          of an LLN (or leaves the LLN entirely) will NOT be discarded, when it has the <xref target="RFC6553" /> RPL Option
          Header known as the RPI or <xref target="RFC6554" /> RH33 Extension Header (S)RH3.
          Because of <xref target="RFC8200"/> the RPI Hop-by-Hop option
          MAY be left in place even if the end host does not
          understand it.
        </t>
-->
        </section>

        <section title="Updates to RFC8138: Indicating the way to decompress with the new RPI Option Type.">
          <t>
          This modification is required in order to be able to decompress the RPL Option
          with the new Option Type of 0x23.
          </t>
          <t>
            RPI-6LoRH header provides a compressed form for the RPL RPI; see
            <xref target="RFC8138"/>, Section 6. A node that is decompressing this header
            MUST decompress using the RPI Option Type that is currently active: that
            is, a choice between 0x23 (new) and 0x63 (old).  The node will know which to
            use based upon the presence of the flag in the DODAG Configuration option defined in
            <xref target="update6550" />. E.g. If the network is in 0x23 mode (by DIO option),
            then it should be decompressed to 0x23.
        </t>
        <t>
          <xref target="RFC8138" /> section 7 documents how to compress
          the IPv6-in-IPv6 header.
        </t>
        <t>
          There are potential significant advantages to having a single
          code path that always processes IPv6-in-IPv6 headers with no
          conditional branches.
        </t>
          <t>
            In Storing Mode, the scenarios where the flow goes from RAL to RUL and RUL
            to  RUL include compression of the IPv6-in-IPv6 and RPI headers. The use
             of the IPv6-in-IPv6 header is MANDATORY in this case, and
             it SHOULD be compressed with <xref target="RFC8138"/> section 7.
             <xref target="rtghc"/>
             illustrates the case in Storing mode where the packet is received from the Internet, then the
             root encapsulates the packet to insert the RPI. In that example,
             the leaf is not known to support RFC 8138, and the packet is
             encapsulated to the 6LR that is the parent and last hop to the
             final destination.
          </t>
        <figure title="RPI Inserted by the Root in Storing Mode" anchor="rtghc"><artwork><![CDATA[
+-+ ... -+-+ ... +-+- ... -+-+- +-+-+-+ ... +-+-+ ... -+++ ... +-...
|11110001|SRH-6LoRH| RPI-  |IP-in-IP| NH=1      |11110CPP| UDP | UDP
|Page 1  |Type1 S=0| 6LoRH |6LoRH   |LOWPAN_IPHC| UDP    | hdr |Payld
+-+ ... -+-+ ... +-+- ... -+-+-.+-+-+-+-+ ... +-+-+ ... -+ ... +-...
         <-4bytes->                      <-        RFC 6282      ->
                                               No RPL artifact
        ]]></artwork></figure>

          <t>
          In <xref target="rtghc"/>, the source of the IPv6-in-IPv6 encapsulation is
          the Root, so it is elided in the IP-in-IP 6LoRH. The destination is
          the parent 6LR of the destination of the inner packet so it cannot be
          elided. It is placed as the single entry in an SRH-6LoRH as the first
          6LoRH. There is a single entry so the SRH-6LoRH Size is 0. In that
          example, the type is 1 so the 6LR address is compressed to 2 bytes.
          It results that the total length of the SRH-6LoRH is 4 bytes.
          Follows the RPI-6LoRH and then the IP-in-IP 6LoRH. When the
          IP-in-IP 6LoRH is removed, all the router headers that precede it are
          also removed.
          The Paging Dispatch <xref target="RFC8025"/> may also be removed if
          there was no previous Page change to a Page other than 0 or 1, since
          the LOWPAN_IPHC is encoded in the same fashion in the default Page 0
          and in Page 1. The resulting packet to the destination is the inner
          packet compressed with <xref target="RFC6282"/>.
          </t>

        </section>
   </section>

       <section title="Sample/reference topology">
                <t>
                A RPL network in general is composed of a 6LBR,
                a Backbone Router (6BBR), a 6LR and a 6LN as a leaf logically organized in a DODAG structure.
                </t>
       	     	<t>
               <xref target="fig_CommonTopology"/> shows the reference RPL Topology for this document. The
               letters above the nodes are there so that
               they may be referenced in subsequent sections. In the figure,
               6LR represents a full router node.
               The 6LN is a RPL aware router, or host (as a leaf).
               Additionally, for simplification purposes,
               it is supposed that the 6LBR has direct access to Internet and is the root of the DODAG, thus the 6BBR
               is not present in the figure.
              </t>

          <t>
            The 6LN leaves (RAL)
            marked as (F, H and I) are RPL nodes with no children hosts.
          </t>
          <t>
	    The leaves marked as RUL (G and J) are
            devices that do not speak RPL at all (not-RPL-aware),
	    but use Router-Advertisements, 6LowPAN DAR/DAC and
            6LoWPAN ND only to participate in the network <xref target="RFC8505"/>.
	    In the document these leaves (G and J) are also referred to as
            a RUL.
          </t>
          <t>
            The 6LBR ("A") in the figure is the root of the Global DODAG.
          </t>
        <t>
             <figure title="A reference RPL Topology." anchor="fig_CommonTopology" align="center">
               <artwork><![CDATA[
                  +------------+
                  |  INTERNET  ----------+
                  |            |         |
                  +------------+         |
                                         |
                                         |
                                         |
                                       A |
                                   +-------+
                                   |6LBR   |
                       +-----------|(root) |-------+
                       |           +-------+       |
                       |                           |
                       |                           |
                       |                           |
                       |                           |
                       | B                         |C
                   +---|---+                   +---|---+
                   |  6LR  |                   |  6LR  |
         +---------|       |--+             +---       ---+
         |         +-------+  |             |  +-------+  |
         |                    |             |             |
         |                    |             |             |
         |                    |             |             |
         |                    |             |             |
         | D                  |  E          |             |
       +-|-----+          +---|---+         |             |
       |  6LR  |          |  6LR  |         |             |
       |       |    +------       |         |             |
       +---|---+    |     +---|---+         |             |
           |        |         |             |             |
           |        |         +--+          |             |
           |        |            |          |             |
           |        |            |          |             |
           |        |            |        I |          J  |
        F  |        | G          | H        |             |
     +-----+-+    +-|-----+  +---|--+   +---|---+     +---|---+
     |  RAL  |    | RUL   |  | RAL  |   |  RAL  |     | RUL   |
     |  6LN  |    |  6LN  |  | 6LN  |   |  6LN  |     |  6LN  |
     +-------+    +-------+  +------+   +-------+     +-------+
  ]]>
             </artwork></figure>
          </t>




       </section>


       <section title="Use cases">
         <t>
           In the data plane a combination of RFC6553, RFC6554 and
           IPv6-in-IPv6 encapsulation are going to be analyzed for a number of
           representative traffic flows.
        </t>
        <t>

          The use cases describe the communication in the following cases:
          - Between RPL-aware-nodes with the root (6LBR)
          - Between RPL-aware-nodes with the Internet
          - Between RUL nodes within the LLN (e.g. see <xref target="sm-nRal2root" />)
          - Inside of the LLN when the final destination address resides outside
            of the LLN (e.g. see <xref target="sm-nRal2i" />).
        </t>
         <t>
             The use cases are as follows:
         </t>
         <t>
             Interaction between Leaf and Root:
         </t>
         <t>
          <list>
             <t>
               RAL to root
             </t>
             <t>
               root to RAL
             </t>
             <t>
               RUL to root
             </t>
             <t>
               root to RUL
             </t>
           </list>
         </t>
         <t>
             Interaction between Leaf and Internet:
         </t>
         <t>
           <list>
             <t>
               RAL to Internet
             </t>
             <t>
               Internet to RAL
             </t>
             <t>
               RUL to Internet
             </t>
             <t>
               Internet to RUL
             </t>
           </list>
        </t>
         <t>
             Interaction between leaves:
         </t>
           <t>
           <list>
             <t>
               RAL to RAL
             </t>
             <t>
               RAL to RUL
             </t>
             <t>
               RUL to RAL
             </t>
             <t>
               RUL to RUL
             </t>
           </list>
           </t>
          <t>
            This document is consistent with the rule that a Header cannot be
            inserted or removed on the fly inside an IPv6 packet that is
            being routed.
            This is a fundamental precept of the IPv6 architecture as
            outlined in <xref target="RFC8200" />.
          </t>
<!--
          <t>
            However, unlike <xref target="RFC6553" />, the Hop-by-Hop Option
            Header used for the RPI artifact has the first two bits set to
            '00'.
            This means that the RPI artifact will be ignored when received by a host
            or router that does not understand that option
            ( Section 4.2 <xref target="RFC8200" />).
          </t>
          <t>
            This means that when the no-drop RPI option code 0x23 is used, a
            packet that leaves the RPL domain of an LLN (or that leaves the LLN
            entirely) will not be discarded when it contains the [RFC6553] RPL
            Hop-by-Hop option known as RPI. Thus, the RPI Hop-by-Hop option is
            left in place even if the end host does not understand it.
          </t>
          <t>
            NOTE: No clear attack has been described when the RPI information is released to the Internet.
            At a minimum, it is clear that the RPI option would waste some network bandwidth when it escapes.
            This is traded off against the savings in the LLN by not having to encapsulate the packet
            in order to remove the artifact. Please check the Security Considerations sections
            <xref target="Security"/> for further details.
          </t>
  -->
          <t>
            As the rank information in the RPI artifact is changed at each
            hop, it will typically be zero when it arrives at the DODAG
            root.  The DODAG root MUST force it to zero when passing the
            packet out to the Internet.  The Internet will therefore not see
            any SenderRank information.
          </t>
          <t>
            Despite being legal to leave the RPI artifact in place,
            an intermediate router that needs to add an extension header
            (e.g. RH3 or RPL Option) MUST still encapsulate the packet in an
            (additional) outer IP header. The new header is placed after
            this new outer IP header.
         </t>
         <t>
           A corollary is that an
            intermediate router can remove an RH3 or RPL Option only
            if it is placed in an encapsulating IPv6
            Header that is addressed TO this intermediate router.
            When doing the above, the whole encapsulating header must be
            removed. (A replacement may be added).  This sometimes can
            result in outer IP headers being addressed to the next hop
            router using link-local address.
          </t>
          <t>
            Both the RPL Option and the RH3 headers may be modified in very specific ways
            by routers on the path of the packet without the need to add and
            remove an encapsulating header.  Both headers were designed with
            this modification in
            mind, and both the RPL RH3 and the RPL Option are marked mutable
            but recoverable: so an IPsec AH security header can be applied
            across these headers, but it can not secure the values which mutate.
          </t>

          <t>
            The RPI MUST be present in every single RPL data packet.
          </t>

          <t>
            Prior to <xref target="RFC8138" />, there was significant
            interest in creating an exception to this rule and removing the RPI for downward flows in non-storing
            mode.  This exception covered a very small number of cases, and
            caused significant interoperability challenges while adding
            significant interest in the code and tests.  The ability to compress
            the RPI down to three bytes or less removes much of the pressure
            to optimize this any further <xref target="I-D.ietf-anima-autonomic-control-plane" />.
          </t>
          <t>
            Throughout the following subsections, the examples are described in more details in the first subsections,
	    and more concisely in the later ones.
          </t>

          <t>
              The uses cases are delineated based on the following IPV6 and RPL mandates:
          </t>
          <t>
           <list>
              <t>
                The RPI has to be in every packet that traverses the LLN.
              </t>
              <t>
                 - Because of the above requirement, packets from the Internet have to be encapsulated.
              </t>
              <t>
                - A Header cannot be inserted or removed on the fly inside an IPv6 packet that is being routed.
              </t>
              <t>
                - Extension headers may not be added or removed except by the sender or the receiver.
              </t>
              <t>
                - RPI and RH3 headers may be modified by routers on the path of the packet without the need to add and remove an encapsulating header.
              </t>
              <t>
                - an RH3 or RPL Option can only be removed by an intermediate router if it is placed in an encapsulating IPv6 Header, which is addressed to the intermediate router.
              </t>
              <t>
                - Non-storing mode requires downstream encapsulation by root for RH3.
              </t>
            </list>
          </t>

          <t>
            The uses cases are delineated based on the following assumptions:
          </t>
          <t>
           <list>
              <t>
               This document assumes that the LLN is using the no-drop RPI Option Type (0x23).
              </t>
              <t>
                - Each IPv6 node (including Internet routers) obeys <xref target="RFC8200"/>, so that 0x23 RPI Option Type can be safely inserted.
              </t>
              <t>
                - All 6LRs obey <xref target="RFC8200"/>.
              </t>
              <t>
                - The RPI is ignored at the IPv6 dst node (RUL).
              </t>
              <t>
                - In the uses cases, we assume that the RAL supports IP-in-IP encapsulation.
              </t>
              <t>
                - In the uses cases, we don't assume that the RUL supports IP-in-IP encapsulation.
              </t>
              <t>
                - For traffic leaving a RUL, if the RUL adds an opaque RPI then the 6LR as a RPL border router SHOULD rewrite
                 the RPI to indicate the selected Instance and set the flags.
              </t>
              <t>
                - The description for RALs applies to RAN in general.
              </t>
              <t>
               - Non-constrained uses of RPL are not in scope of this document.
              </t>
              <t>
               - Compression is based on <xref target="RFC8138"/>.
              </t>
              <t>
               - The flow label <xref target="RFC6437"/> is not needed in RPL.
              </t>
            </list>
          </t>
        </section>


        <section title="Storing mode">

          <t>
	         In storing mode (SM) (fully stateful), the sender can determine if
           the destination is inside the LLN by
            looking if the destination address is matched by the DIO's Prefix Information Option (PIO) option.
          </t>
          <t>
            The following table (<xref target="fig_EncStoMode"/>) itemizes which headers are needed in each of the following scenarios.
            It indicates whether an IPv6-in-IPv6 header must be added and what destination it must be addressed to:
	    (1) the final destination (the RAL node that is the target (tgt)),
            (2) the "root",
            or (3) the 6LR parent of a RUL.
          </t>
          <t>
            In cases where no IPv6-in-IPv6 header is needed, the column states "No", and the destination is N/A (Not Applicable).
            If the IPv6-in-IPv6 header is needed, the column shows "must".
          </t>
          <t>
            In all cases, the RPI is needed, since it identifies
            inconsistencies (loops) in the routing topology.
            In general, the RH3 is not needed because it is not used in storing mode. However, there is one scenario (from the root to the RUL in SM)
            where the RH3 can be used to point at the RUL (<xref target="Storing-root2notrplnoIPIP"/>).
          </t>
          <t>
            The leaf can be a router 6LR or a host, both indicated as 6LN. The root refers to the 6LBR
            (see <xref target="fig_CommonTopology" />).
          </t>
           <t>
       <figure title="Table of IPv6-in-IPv6 encapsulation in Storing mode." anchor="fig_EncStoMode" align="center">
         <artwork><![CDATA[
+---------------------+--------------+------------+----------------+
| Interaction between |   Use Case   |IPv6-in-IPv6|IPv6-in-IPv6 dst|
+---------------------+--------------+------------+----------------+
|                     |  RAL to root |    No      |      N/A       |
+                     +--------------+------------+----------------+
|     Leaf - Root     |  root to RAL |    No      |      N/A       |
+                     +--------------+------------+----------------+
|                     | root to RUL  |   must     |       6LR      |
+                     +--------------+------------+----------------+
|                     | RUL to root  |   must     |       root     |
+---------------------+--------------+------------+----------------+
|                     |  RAL to Int  |   may      |      root      |
+                     +--------------+------------+----------------+
|   Leaf - Internet   |  Int to RAL  |   must     |      RAL (tgt) |
+                     +--------------+------------+----------------+
|                     |  RUL to Int  |   must     |       root     |
+                     +--------------+------------+----------------+
|                     |  Int to RUL  |   must     |       6LR      |
+---------------------+--------------+------------+----------------+
|                     |  RAL to RAL  |    No      |      N/A       |
|  Leaf - Leaf        +--------------+------------+----------------+
|                     |  RAL to RUL  |    No(up)  |      N/A       |
|                     +              +------------+----------------+
|                     |              | must(down) |      6LR       |
|                     +--------------+------------+----------------+
|                     |  RUL to RAL  |   must(up) |      root      |
|                     |              +------------+----------------+
|                     |              | must(down) |      RAL       |
|                     +--------------+------------+----------------+
|                     |  RUL to RUL  |   must(up) |      root      |
|                     |              +------------+----------------+
|                     |              | must(down) |      6LR       |
|---------------------+--------------+------------+----------------+
                         ]]></artwork></figure>
                          </t>
         <section title="Storing Mode: Interaction between Leaf and Root">

            <t>
             In this section is described the communication flow
             in storing mode (SM) between,
            </t>
            <t>
             <list>
               <t>
                 RAL to root
               </t>
               <t>
                 root to RAL
               </t>
               <t>
                 RUL to root
               </t>
               <t>
                 root to RUL
               </t>
             </list>
            </t>
              <!-- 5.1.  Example of Flow from RAL to root !-->
               <section title="SM: Example of Flow from RAL to Root">

		 <t>
                        In storing mode, RFC 6553 (RPI) is used
                        to send RPL Information instanceID and rank
                        information.
                        </t>
                        <t>
                           In this case the flow comprises:
                        </t>
                        <t>
                        RAL (6LN) --> 6LR_i --> root(6LBR)
                        </t>
                        <t>
                        For example, a communication flow could be: Node F (6LN) --> Node D (6LR_i) --> Node B (6LR_i)--> Node A root(6LBR)
                        </t>
                         <t>
                           The RAL (Node F) inserts the RPI, and sends the
                           packet to 6LR (Node D) which decrements the rank in the RPI and
                           sends the packet up. When the packet arrives at
                           6LBR (Node A), the RPI is removed and the packet is
                           processed.
                         </t>
                        <t>
                          No IPv6-in-IPv6 header is required.
                        </t>

                         <t> The RPI can be removed by the 6LBR
                         because the packet is addressed to the 6LBR.  The
                         RAL must know that it is communicating with the 6LBR
                         to make use of this scenario.
                         The RAL can know the address of the 6LBR because it
                         knows the address of the root via the DODAGID in the
                         DIO messages.
                         </t>
                         <t>
                         The <xref target="Storing-summary-headers"/> summarizes what headers are needed for this use case.
                         </t>
                         <t>
                         <figure title="SM: Summary of the use of headers from RAL to root" anchor="Storing-summary-headers" align="center">
                           <artwork><![CDATA[
+-----------+-----+-------+------+
|   Header  | RAL | 6LR_i | 6LBR |
|           | src |       |  dst |
+-----------+-----+-------+------+
|   Added   | RPI |   --  |  --  |
|  headers  |     |       |      |
+-----------+-----+-------+------+
|  Modified |  -- |  RPI  |  --  |
|  headers  |     |       |      |
+-----------+-----+-------+------+
|  Removed  |  -- |   --  |  RPI |
|  headers  |     |       |      |
+-----------+-----+-------+------+
| Untouched |  -- |   --  |  --  |
|  headers  |     |       |      |
+-----------+-----+-------+------+
                         ]]></artwork></figure>
                         </t>
               </section>

               <!-- section 7.2.  !-->

               <section title="SM: Example of Flow from Root to RAL" anchor="Storing-root2ral">

                         <t>
                                In this case the flow comprises:
                        </t>
                        <t>

                                root (6LBR) --> 6LR_i --> RAL (6LN)
                        </t>
                        <t>
                        For example, a communication flow could be: Node A root(6LBR) --> Node B (6LR_i) --> Node D (6LR_i) --> Node F (6LN)
                        </t>
                        <t>
                                In this case the 6LBR inserts RPI and
                                sends the packet down, the 6LR is going to
                                increment the rank in RPI (it examines the
                                RPLInstanceID to identify the right forwarding
                                table),
                                the packet
                                is processed in the RAL and the RPI removed.
                        </t>
                        <t>
                          No IPv6-in-IPv6 header is required.
                        </t>
                        <t>
                        The <xref target="Storing-root2leaf"/> summarizes what headers are needed for this use case.
                       </t>
                       <t>
                       <figure title="SM: Summary of the use of headers from root to RAL" anchor="Storing-root2leaf" align="center">
                         <artwork><![CDATA[
+-----------+------+-------+-----+
|   Header  | 6LBR | 6LR_i | RAL |
|           |  src |       | dst |
+-----------+------+-------+-----+
|   Added   |  RPI |   --  |  -- |
|  headers  |      |       |     |
+-----------+------+-------+-----+
|  Modified |  --  |  RPI  |  -- |
|  headers  |      |       |     |
+-----------+------+-------+-----+
|  Removed  |  --  |   --  | RPI |
|  headers  |      |       |     |
+-----------+------+-------+-----+
| Untouched |  --  |   --  |  -- |
|  headers  |      |       |     |
+-----------+------+-------+-----+
                       ]]></artwork></figure>
                       </t>
               </section>

              <!-- section 7.3. !-->

               <section title="SM: Example of Flow from Root to RUL">
                        <t>
                        In this case the flow comprises:
                        </t>
                        <t>
                                root (6LBR) --> 6LR_i --> RUL (IPv6 dst node)
                        </t>
                        <t>
                        For example, a communication flow could be: Node A (6LBR) --> Node B (6LR_i) --> Node E (6LR_n) --> Node G (RUL)
                        </t>
                        <t>
                          6LR_i (Node B) represents the intermediate routers from the source (6LBR) to the destination (RUL),
                          1 &lt;= i &lt;= n, where n is the total number of routers (6LR)
                          that the packet goes through from the 6LBR (Node A) to the RUL (Node G).
                        </t>
                        <t>
                        The 6LBR will encapsulate the packet in an IPv6-in-IPv6 header, and prepend an RPI. The IPv6-in-IPv6
                        header is addressed to the 6LR parent of the RUL (6LR_n).
                        The 6LR parent of the RUL removes the header and sends the packet to the RUL.
                        </t>
                        <t>
                        The <xref target="Storing-root2notrpl"/> summarizes what headers are needed for this use case.
                       </t>
                       <t>
                       <figure title="SM: Summary of the use of headers from root to RUL" anchor="Storing-root2notrpl" align="center">
                         <artwork><![CDATA[
+-----------+---------+---------+---------+-----+
|   Header  |   6LBR  |  6LR_i  |  6LR_n  | RUL |
|           |   src   |         |         | dst |
+-----------+---------+---------+---------+-----+
|   Added   | IP6-IP6 |    --   |    --   |  -- |
|  headers  |   RPI   |         |         |     |
+-----------+---------+---------+---------+-----+
|  Modified |    --   |         |     --  |  -- |
|  headers  |         |   RPI   |         |     |
+-----------+---------+---------+---------+-----+
|  Removed  |    --   |    --   | IP6-IP6 |  -- |
|  headers  |         |         |   RPI   |     |
+-----------+---------+---------+---------+-----+
| Untouched |    --   | IP6-IP6 |    --   |  -- |
|  headers  |         |         |         |     |
+-----------+---------+---------+---------+-----+
                       ]]></artwork></figure>
                       </t>
                       <t>
                       IP-in-IP encapsulation may be avoided for Root to RUL communication.
                       In SM, it can be replaced by a loose RH3 header that indicates the RUL,
                       in which case the packet is routed to the 6LR as a normal SM operation,
                       then the 6LR forwards to the RUL based on the RH3, and the RUL ignores
                       both the consumed RH3 and the RPI, as in Non-Storing Mode.
                       </t>
                       <t>
                       The <xref target="Storing-root2notrplnoIPIP"/> summarizes what headers are needed for this scenario.
                      </t>
                       <t>
                       <figure title="SM: Summary of the use of headers from root to RUL without encapsulation" anchor="Storing-root2notrplnoIPIP" align="center">
                         <artwork><![CDATA[
+-----------+----------+--------------+----------------+----------+
|   Header  |   6LBR   |     6LR_i    |      6LR_n     |   RUL    |
|           |    src   | i=(1,..,n-1) |                |   dst    |
|           |          |              |                |          |
+-----------+----------+--------------+----------------+----------+
|   Added   | RPI, RH3 |      --      |       --       |    --    |
|  headers  |          |              |                |          |
+-----------+----------+--------------+----------------+----------+
|  Modified |    --    |     RPI      |     RPI        |    --    |
|  headers  |          |              | RH3(consumed)  |          |
+-----------+----------+--------------+----------------+----------+
|  Removed  |    --    |      --      |    --          |    --    |
|  headers  |          |              |                |          |
+-----------+----------+--------------+----------------+----------+
| Untouched |    --    |     RH3      |       --       | RPI, RH3 |
|  headers  |          |              |                |  (both   |
|           |          |              |                | ignored) |
+-----------+----------+--------------+----------------+----------+
                       ]]></artwork></figure>
                       </t>

                 </section>

               <section anchor="sm-nRal2root" title="SM: Example of Flow from RUL to Root">
                        <t>
                                In this case the flow comprises:
                        </t>
                        <t>

                                RUL (IPv6 src node) --> 6LR_1 --> 6LR_i --> root (6LBR)
                        </t>
                        <t>
                        For example, a communication flow could be: Node G (RUL) --> Node E (6LR_1)--> Node B (6LR_i)--> Node A root(6LBR)
                        </t>
                        <t>
                          6LR_i represents the intermediate routers from the source (RUL) to the destination (6LBR),
                          1 &lt;= i &lt;= n, where n is the total number of routers (6LR)
                          that the packet goes through from the RUL to the 6LBR.
                        </t>
                        <t>
                        When the packet arrives from the RUL (Node G) to
                        6LR_1 (Node E), the 6LR_1 will encapsulate the packet
                        in an IPv6-in-IPv6 header with an RPI. The IPv6-in-IPv6
                        header is addressed to the root (Node A).  The root removes the header and processes
                        the packet.
                        </t>
                        <t>
                        The <xref target="Storing-notrpl2root"/> shows the table that summarizes what headers are needed for this use case
                        where the IPv6-in-IPv6 header is addressed to the root (Node A).
                        </t>
                        <t>
                        <figure title="SM: Summary of the use of headers from RUL to root." anchor="Storing-notrpl2root" align="center">
<artwork><![CDATA[
+-----------+------+--------------+----------------+-----------------+
|   Header  | RUL  |     6LR_1    |     6LR_i      |       6LBR dst  |
|           | src  |              |                |                 |
|           | node |              |                |                 |
+-----------+------+--------------+----------------+-----------------+
|   Added   |  --  |   IP6-IP6    |                |         --      |
|  headers  |      |     RPI      |    --          |                 |
+-----------+------+--------------+----------------+-----------------+
|  Modified |  --  |      --      |       RPI      |         --      |
|  headers  |      |              |                |                 |
+-----------+------+--------------+----------------+-----------------+
|  Removed  |  --  |      --      |      ---       |     IP6-IP6     |
|  headers  |      |              |                |       RPI       |
+-----------+------+--------------+----------------+-----------------+
| Untouched |  --  |      --      |      IP6-IP6   |         --      |
|  headers  |      |              |                |                 |
+-----------+------+--------------+----------------+-----------------+
]]></artwork></figure>
                        </t>
               </section>
         </section>
        <section title=" SM: Interaction between Leaf and Internet.">

                  <t>
                   In this section is described the communication flow
                   in storing mode (SM) between,
                   </t>
                 <t>
                   <list>
                     <t>
                       RAL to Internet
                     </t>
                     <t>
                       Internet to RAL
                     </t>
                     <t>
                       RUL to Internet
                     </t>
                     <t>
                       Internet to RUL
                     </t>
                   </list>
                 </t>

               <section  anchor="sm-Ral2i" title="SM: Example of Flow from RAL to Internet">
                         <t>
                                In this case the flow comprises:
                        </t>
                        <t>

                                RAL (6LN) --> 6LR_i --> root (6LBR) --> Internet
                        </t>
                        <t>
                        For example, the communication flow could be: Node F (RAL) --> Node D (6LR_i)--> Node B (6LR_i)--> Node A root(6LBR) --> Internet
                        </t>
                        <t>
                          6LR_i represents the intermediate routers from the source (RAL) to the root (6LBR),
                          1 &lt;= i &lt;= n, where n is the total number of routers (6LR)
                          that the packet goes through from the RAL to the 6LBR.
                        </t>
                        <t>
                       RPL information from RFC 6553 may go out to
                       Internet as it will be ignored by nodes which have
                       not been configured to be RPI aware. No IPv6-in-IPv6 header is required.
		       <!--  Beginning of Section 6 says
                             "The DODAG root MUST force it to zero when passing the packet out to the Internet."
                       -->
                        </t>
                        <t>
                       On the other hand, the RAL may insert the RPI encapsulated in a IPv6-in-IPv6 header to the root.
                       Thus, the root removes the RPI and send the packet to the Internet.
                        </t>
                        <t>
                          Note: In this use case, it is used a node as a leaf, but this use case can be also
                          applicable to any RPL-aware-node type (e.g. 6LR)
                        </t>
                        <t>
                        The <xref target="Storing-rpl2int"/> summarizes what headers are needed for this use case when there is no encapsulation.
                        Note that the RPI is modified by 6LBR to set the SenderRank to zero in case that it is not already zero.
                        The <xref target="Storing-rpl2intIPIP"/> summarizes what headers are needed when encapsulation to the root takes place.
                        </t>

                        <t>
                        <figure title="SM: Summary of the use of headers from RAL to Internet with no encapsulation" anchor="Storing-rpl2int" align="center">
                          <artwork><![CDATA[
+-----------+-----+-------+------+-----------+
|   Header  | RAL | 6LR_i | 6LBR |  Internet |
|           | src |       |      |    dst    |
+-----------+-----+-------+------+-----------+
|   Added   | RPI |   --  |  --  |     --    |
|  headers  |     |       |      |           |
+-----------+-----+-------+------+-----------+
|  Modified |  -- |  RPI  |  RPI |     --    |
|  headers  |     |       |      |           |
+-----------+-----+-------+------+-----------+
|  Removed  |  -- |   --  |  --  |     --    |
|  headers  |     |       |      |           |
+-----------+-----+-------+------+-----------+
| Untouched |  -- |   --  |  --  |    RPI    |
|  headers  |     |       |      | (Ignored) |
+-----------+-----+-------+------+-----------+
                        ]]></artwork></figure>
<!-- RPI touched by 6LBR? set DagRank to 0? -->
		       </t>
                        <t>
                        <figure title="SM: Summary of the use of headers from RAL to Internet with encapsulation to the root (6LBR)."
                           anchor="Storing-rpl2intIPIP" align="center">
                          <artwork><![CDATA[
+-----------+----------+--------------+--------------+--------------+
|   Header  | RAL      |    6LR_i     |  6LBR        | Internet dst |
|           | src      |              |              |              |
+-----------+----------+--------------+--------------+--------------+
|   Added   | IP6-IP6  |     --       |      --      |         --   |
|  headers  |   RPI    |              |              |              |
+-----------+----------+--------------+--------------+--------------+
|  Modified |    --    |     RPI      |     --       |         --   |
|  headers  |          |              |              |              |
+-----------+----------+--------------+--------------+--------------+
|  Removed  |    --    |      --      |   IP6-IP6    |     --       |
|  headers  |          |              |     RPI      |              |
+-----------+----------+--------------+--------------+--------------+
| Untouched |    --    |    IP6-IP6   |      --      |         --   |
|  headers  |          |              |              |              |
+-----------+----------+--------------+--------------+--------------+
                        ]]></artwork></figure>
                        </t>
               </section>

               <!-- section 7.6 -->
               <section title="SM: Example of Flow from Internet to RAL">
                        <t>
                                In this case the flow comprises:
                        </t>
                        <t>

                                Internet --> root (6LBR) --> 6LR_i --> RAL (6LN)
                        </t>
                        <t>
                        For example, a communication flow could be: Internet --> Node A root(6LBR) --> Node B (6LR_1) --> Node D (6LR_n) --> Node F (RAL)
                        </t>
                        <t>

                                When the packet arrives from Internet to 6LBR
                                the RPI is added in a outer
                                IPv6-in-IPv6 header (with the IPv6-in-IPv6 destination address set to the RAL) and sent to 6LR, which
                                modifies the rank in the RPI. When the packet
                                arrives at the RAL, the packet is decapsulated, which removes the RPI before the
                                packet is processed.
                        </t>
                        <t>
                        The <xref target="Storing-int2rpl"/> shows the table that summarizes what headers are needed for this use case.

                        </t>
                        <t>
                        <figure title="SM: Summary of the use of headers from Internet to RAL."
                           anchor="Storing-int2rpl" align="center">
                          <artwork><![CDATA[
+-----------+----------+--------------+--------------+--------------+
|   Header  | Internet |     6LBR     |     6LR_i    |     RAL dst  |
|           | src      |              |              |              |
+-----------+----------+--------------+--------------+--------------+
|   Added   |    --    | IP6-IP6(RPI) |      --      |         --   |
|  headers  |          |              |              |              |
+-----------+----------+--------------+--------------+--------------+
|  Modified |    --    |      --      |      RPI     |         --   |
|  headers  |          |              |              |              |
+-----------+----------+--------------+--------------+--------------+
|  Removed  |    --    |      --      |      --      | IP6-IP6(RPI) |
|  headers  |          |              |              |              |
+-----------+----------+--------------+--------------+--------------+
| Untouched |    --    |      --      |      --      |         --   |
|  headers  |          |              |              |              |
+-----------+----------+--------------+--------------+--------------+
                        ]]></artwork></figure>
                        </t>
               </section>


               <!-- section 7.6 -->
               <section anchor="sm-nRal2i" title="SM: Example of Flow from RUL to Internet">
                 <t>
                   In this case the flow comprises:
                 </t>
                 <t>
                   RUL (IPv6 src node) --> 6LR_1 --> 6LR_i -->root (6LBR) --> Internet
                 </t>
                 <t>
                 For example, a communication flow could be: Node G (RUL)--> Node E (6LR_1)--> Node B (6lR_i) --> Node A root(6LBR) --> Internet
                 </t>
                 <t>
                   The node 6LR_1 (i=1) will add an IPv6-in-IPv6(RPI) header addressed to the root such that the root can remove
                   the RPI before passing upwards.
                   In the intermediate 6LR, the rank in the RPI is modified.
                 </t>
                 <t>
                   The originating node will ideally leave the IPv6 flow
                   label as zero so that the packet can be better compressed through
                   the LLN. The 6LBR will set the flow label of the packet to a
                   non-zero value when sending to the Internet, for details check <xref target="RFC6437"/>.
                 </t>
                 <t>
                 The <xref target="Storing-notrpl2int"/> shows the table that summarizes what headers are needed for this use case.
                 </t>
                 <t>
                 <figure title="SM: Summary of the use of headers from RUL to Internet." anchor="Storing-notrpl2int" align="center">
                   <artwork><![CDATA[
+---------+-------+------------+-------------+-------------+--------+
|  Header | IPv6  |   6LR_1    |    6LR_i    |     6LBR    |Internet|
|         |  src  |            | [i=2,...,n] |             |  dst   |
|         | node  |            |             |             |        |
|         | (RUL) |            |             |             |        |
+---------+-------+------------+-------------+-------------+--------+
|  Added  |   --  |IP6-IP6(RPI)|     --      |      --     |    --  |
| headers |       |            |             |             |        |
+---------+-------+------------+-------------+-------------+--------+
| Modified|   --  |    --      |      RPI    |      --     |    --  |
| headers |       |            |             |             |        |
+---------+-------+------------+-------------+-------------+--------+
| Removed |   --  |    --      |     --      | IP6-IP6(RPI)|    --  |
| headers |       |            |             |             |        |
+---------+-------+------------+-------------+-------------+--------+
|Untouched|   --  |    --      |     --      |      --     |    --  |
| headers |       |            |             |             |        |
+---------+-------+------------+-------------+-------------+--------+
                 ]]></artwork></figure>
                 </t>
               </section>

                       <section title="SM: Example of Flow from Internet to RUL. ">
                        <t>
                                In this case the flow comprises:
                        </t>
                        <t>
                                Internet --> root (6LBR) --> 6LR_i --> RUL (IPv6 dst node)
                        </t>
                        <t>
                        For example, a communication flow could be: Internet --> Node A root(6LBR) --> Node B (6LR_i)--> Node E (6LR_n) --> Node G (RUL)
                        </t>
                        <t>
                          The 6LBR will have to add an RPI within an
                          IPv6-in-IPv6 header. The IPv6-in-IPv6 is addressed
                          to the 6LR parent of the RUL.
                        </t>
                        <t>
                          Further details about this are mentioned in <xref target="I-D.ietf-roll-unaware-leaves"/>,
                          which specifies RPL routing for a 6LN acting as a plain host and not being aware of RPL.
                        </t>
                        <t>
                          The 6LBR may set the flow label on the inner IPv6-in-IPv6
                          header to zero in order to aid in compression <xref target="RFC8138"/><xref target="RFC6437"/>.
                       </t>
                       <t>
                       The <xref target="Storing-int2notrpl"/> shows the table that summarizes what headers are needed for this use case.

                       </t>
                        <t>
                       <figure title=" SM: Summary of the use of headers from Internet to RUL."
                         anchor="Storing-int2notrpl"  align="center">
                         <artwork><![CDATA[
+---------+-------+------------+--------------+-------------+-------+
|  Header |Inter- |   6LBR     |     6LR_i    |     6LR_n   | RUL   |
|         | net   |            |[i=1,..,n-1]  |             | dst   |
|         | src   |            |              |             |       |
|         |       |            |              |             |       |
+---------+-------+------------+--------------+-------------+-------+
| Inserted|   --  |IP6-IP6(RPI)|   --         |      --     |   --  |
| headers |       |            |              |             |       |
+---------+-------+------------+--------------+-------------+-------+
| Modified|   --  |    --      |      RPI     |      --     |   --  |
| headers |       |            |              |             |       |
+---------+-------+------------+--------------+-------------+-------+
| Removed |   --  |    --      |   --         | IP6-IP6(RPI)|   --  |
| headers |       |            |              |             |       |
+---------+-------+------------+--------------+-------------+-------+
|Untouched|   --  |    --      |      --      |      --     |   --  |
| headers |       |            |              |             |       |
+---------+-------+------------+--------------+-------------+-------+
                       ]]></artwork></figure>
                       </t>
               </section>
      </section>
      <section title="SM: Interaction between Leaf and Leaf">
        <t>
         In this section is described the communication flow
         in storing mode (SM) between,
        </t>
        <t>
         <list>
           <t>
             RAL to RAL
           </t>
           <t>
             RAL to RUL
           </t>
           <t>
             RUL to  RAL
           </t>
           <t>
             RUL to RUL
           </t>
         </list>
       </t>
               <!-- section 7.9 -->
               <section anchor="storingRALtoRAL" title="SM: Example of Flow from RAL to RAL">
                 <t>
                   In <xref target="RFC6550"/> RPL allows a simple one-hop
                   optimization for both storing and non-storing
                   networks.
                   A node may send a packet destined to a one-hop
                   neighbor directly to that node. See section 9 in <xref
                   target="RFC6550"/>.
                 </t>
                 <t>
                   When the nodes are not directly connected, then in storing
                   mode, the flow comprises:
                 </t>
                 <t>
                   RAL src (6LN) --> 6LR_ia --> common parent (6LR_x) --> 6LR_id -->  RAL dst (6LN)
                 </t>
                 <t>
                 For example, a communication flow could be: Node F (RAL src)--> Node D (6LR_ia)--> Node B (6LR_x) --> Node E (6LR_id) --> Node H (RAL dst)
                 </t>
                 <t>
                   6LR_ia (Node D) represents the intermediate routers from source to the common parent (6LR_x) (Node B),
                   1 &lt;= ia &lt;= n, where n is the total number of routers (6LR)
                   that the packet goes through from RAL (Node F) to the common parent 6LR_x (Node B).
                 </t>
                 <t>
                   6LR_id (Node E) represents the intermediate routers from the common parent (6LR_x) (Node B) to destination RAL (Node H),
                    1 &lt;= id &lt;= m, where m is the total number of routers (6LR)
                   that the packet goes through from the common parent (6LR_x) to destination RAL (Node H).
                 </t>
                 <t>
                   It is assumed that the two nodes are in the same RPL domain
                   (that they share the same DODAG root). At the
                   common parent (Node B), the direction flag ('O' flag) of the RPI is changed (from decreasing ranks to increasing ranks).
                 </t>
                 <t>
                   While the 6LR nodes will update the RPI, no node needs to
                   add or remove the RPI, so no IPv6-in-IPv6 headers are
                   necessary.
                </t>
                <t>
                The <xref target="Storing-rpl2rpl"/> summarizes what headers are needed for this use case.
                </t>
                <t>
                <figure title="SM: Summary of the Use of Headers from RAL to RAL" anchor="Storing-rpl2rpl" align="center">
                  <artwork><![CDATA[
+-----------+-----+--------+---------+--------+-----+
|   Header  | RAL | 6LR_ia |  6LR_x  | 6LR_id | RAL |
|           | src |        | (common |        | dst |
|           |     |        | parent) |        |     |
+-----------+-----+--------+---------+--------+-----+
|   Added   | RPI |   --   |    --   |   --   |  -- |
|  headers  |     |        |         |        |     |
+-----------+-----+--------+---------+--------+-----+
|  Modified |  -- |   RPI  |   RPI   |   RPI  |  -- |
|  headers  |     |        |         |        |     |
+-----------+-----+--------+---------+--------+-----+
|  Removed  |  -- |   --   |    --   |   --   | RPI |
|  headers  |     |        |         |        |     |
+-----------+-----+--------+---------+--------+-----+
| Untouched |  -- |   --   |    --   |   --   |  -- |
|  headers  |     |        |         |        |     |
+-----------+-----+--------+---------+--------+-----+
                ]]></artwork></figure>
                </t>
               </section>

               <!-- section 7.10 -->
               <section anchor="storingRALtononRAL" title="SM: Example of Flow from RAL to RUL">
                        <t>
                        In this case the flow comprises:
                        </t>
                        <t>
                         RAL src (6LN) --> 6LR_ia --> common parent (6LBR - The root-) --> 6LR_id -->  RUL (IPv6 dst node)
                        </t>
                        <t>
                        For example, a communication flow could be: Node F (RAL)--> Node D --> Node B--> Node A -->Node B --> Node E --> Node G (RUL)
                        </t>
                        <t>
                          6LR_ia represents the intermediate routers from source (RAL) to the
                          common parent (the Root), 1 &lt;= ia &lt;= n, where n is the total number of
                          routers (6LR) that the packet goes through from RAL to the Root.
                        </t>
                        <t>
                          6LR_id (Node E) represents the intermediate routers from the Root
                          (Node B) to destination RUL (Node G).  In this case, 1 &lt;= id &lt;= m,
                          where m is the total number of routers (6LR) that the packet goes
                          through from the Root down to the destination RUL.
                        </t>
                        <t>
                          In this case, the packet from the RAL goes to 6LBR because the route to the RUL is not injected into the RPL-SM.
                          Thus, the RAL inserts an RPI (RPI1) addressed to the root(6LBR). The root does not remove the RPI1
                          (the root cannot remove an RPI if there is no encapsulation). The root inserts an IPv6-IPv6 encapsulation with an RPI2
                          and sends it to the 6LR parent of the RUL, which removes the encapsulation and RPI2 before passing the packet to the RUL.
                        </t>
                        <!-- section 7.10
                          This situation is identical to the previous situation
                          <xref target="storingRALtoRAL" />
                        </t> -->
                        <t>
                        The <xref target="Storing-rpl2nrpl"/> summarizes what headers are needed for this use case.
                        </t>
                        <t>
                        <figure  title="SM: Summary of the Use of Headers from RAL to RUL" anchor="Storing-rpl2nrpl" align="center">
                                    <artwork><![CDATA[
+----------+-------+-------+---------+---------+---------+---------+
|  Header  | RAL   |6LR_ia |   6LBR  |  6LR_id |  6LR_m  | RUL     |
|          | src   |       |         |         |         | dst     |
|          | node  |       |         |         |         | node    |
+----------+-------+-------+---------+---------+---------+---------+
|  Added   |       |       | IP6-IP6 |    --   |    --   |  --     |
| headers  | RPI1  |  --   |  (RPI2) |         |         |         |
|          |       |       |         |         |         |         |
+----------+-------+-------+---------+---------+---------+---------+
| Modified |  --   |       |    --   |         |         |  --     |
| headers  |       |  RPI1 |         |   RPI2  |  --     |         |
|          |       |       |         |         |         |         |
+----------+-------+-------+---------+---------+---------+---------+
| Removed  |  --   |  --   |         |    --   | IP6-IP6 |  --     |
| headers  |       |       |   --    |         |  (RPI2) |         |
|          |       |       |         |         |         |         |
+----------+-------+-------+---------+---------+---------+---------+
|Untouched |  --   |  --   |  RPI1   |   RPI1  |   RPI1  | RPI1    |
| headers  |       |       |         |         |         |(Ignored)|
|          |       |       |         |         |         |         |
+----------+-------+-------+---------+---------+---------+---------+
                        ]]></artwork></figure>
                        </t>
               </section>

               <section anchor="storingnotRALtoRAL" title="SM: Example of Flow from RUL to RAL">
                 <t>
                   In this case the flow comprises:
                 </t>
                 <t>
                   RUL (IPv6 src node) --> 6LR_ia --> 6LBR --> 6LR_id -->  RAL dst (6LN)
                 </t>
                 <t>
                 For example, a communication flow could be: Node G (RUL)--> Node E --> Node B --> Node A --> Node B --> Node D --> Node F (RAL)
                 </t>
                 <t>
                   6LR_ia (Node E) represents the intermediate routers from source (RUL) (Node G) to the root (Node A).
                   In this case, 1 &lt;= ia &lt;= n, where n is the total number of routers (6LR)
                   that the packet goes through from source to the root.
                 </t>
                 <t>
                   6LR_id represents the intermediate routers from the root (Node A) to destination RAL (Node F).
                   In this case, 1 &lt;= id &lt;= m, where m is the total number of routers (6LR)
                   that the packet goes through from the root to the destination RAL.
                 </t>
                 <t>
                   The 6LR_1 (Node E) receives the packet from the RUL (Node G) and
                   inserts the RPI (RPI1) encapsulated in a IPv6-in-IPv6 header to the root.
                   The root removes the outer header including the RPI (RPI1) and
                   inserts a new RPI (RPI2) addressed to the destination RAL (Node F).
                 </t>
                 <t>
                 The <xref target="Storing-notrpl2rpl"/> shows the table that summarizes what headers are needed for this use case.
                 </t>
                 <t>
                 <figure title="SM: Summary of the use of headers from RUL to RAL." anchor="Storing-notrpl2rpl"  align="center">
                   <artwork><![CDATA[
+-----------+------+---------+---------+---------+---------+---------+
|   Header  | RUL  |  6LR_1  |  6LR_ia |   6LBR  |  6LR_id |   RAL   |
|           | src  |         |         |         |         |   dst   |
|           | node |         |         |         |         |   node  |
+-----------+------+---------+---------+---------+---------+---------+
|   Added   |  --  | IP6-IP6 |    --   | IP6-IP6 |    --   |    --   |
|  headers  |      |  (RPI1) |         |  (RPI2) |         |         |
|           |      |         |         |         |         |         |
+-----------+------+---------+---------+---------+---------+---------+
|  Modified |  --  |         |         |    --   |         |    --   |
|  headers  |      |   --    |  RPI1   |         |   RPI2  |         |
|           |      |         |         |         |         |         |
+-----------+------+---------+---------+---------+---------+---------+
|  Removed  |  --  |         |    --   | IP6-IP6 |    --   | IP6-IP6 |
|  headers  |      |  --     |         |  (RPI1) |         | (RPI2)  |
|           |      |         |         |         |         |         |
+-----------+------+---------+---------+---------+---------+---------+
| Untouched |  --  |  --     |    --   |    --   |    --   |    --   |
|  headers  |      |         |         |         |         |         |
+-----------+------+---------+---------+---------+---------+---------+
                 ]]></artwork></figure>
                 </t>
               </section>

               <section title="SM: Example of Flow from RUL to RUL">
                 <t>
                   In this case the flow comprises:
                 </t>
                 <t>
                   RUL (IPv6 src node)--> 6LR_1--> 6LR_ia --> 6LBR --> 6LR_id --> RUL (IPv6 dst node)
                 </t>
                 <t>
                 For example, a communication flow could be: Node G (RUL src)--> Node E --> Node B --> Node A (root) --> Node C --> Node J (RUL dst)
                 </t>
                 <t>
                   Internal nodes 6LR_ia (e.g: Node E or Node B) is the
                   intermediate router from the RUL source (Node G)
                   to the root (6LBR) (Node A).
                   In this case, 1 &lt;= ia &lt;= n, where n is the total number of routers (6LR)
                   that the packet goes through from the RUL to the root. 6LR_1 refers when ia=1.
                 </t>
                 <t>
                   6LR_id (Node C) represents the intermediate routers from the root
                   (Node A) to the destination RUL dst node (Node J).
                   In this case, 1 &lt;= id &lt;= m, where m is the total number of routers (6LR)
                   that the packet goes through from the root  to destination RUL.

                 </t>
                 <t>
                   The 6LR_1 (Node E) receives the packet from the
                   RUL (Node G) and inserts  the RPI (RPI),
                   encapsulated in an IPv6-in-IPv6 header directed to the root.
                   The root removes the outer header including the RPI (RPI1) and
                   inserts a new RPI (RPI2) addressed to the 6LR father of the RUL.
                 </t>
                 <t>
                 The <xref target="Storing-notrpl2notrpl"/> shows the table that summarizes what headers are needed for this use case.

                 </t>
                 <t>
                 <figure  title="SM: Summary of the use of headers from RUL to RUL" anchor="Storing-notrpl2notrpl" align="center">
                   <artwork><![CDATA[
+---------+----+-------------+--------+---------+--------+-------+---+
| Header  |RUL |   6LR_1     | 6LR_ia |   6LBR  | 6LR_id |6LR_n  |RUL|
|         |src |             |        |         |        |       |dst|
|         |    |             |        |         |        |       |   |
+---------+----+-------------+--------+---------+--------+-------+---+
| Added   | -- |IP6-IP6(RPI1)|   --   | IP6-IP6 |   --   | --    | --|
| Headers |    |             |        |  (RPI2) |        |       |   |
+---------+----+-------------+--------+---------+--------+-------+---+
|Modified | -- |     --      |        |    --   |        | --    | --|
|headers  |    |             |  RPI1  |         |  RPI2  |       |   |
+---------+----+-------------+--------+---------+--------+-------+---+
| Removed | -- |     --      |   --   | IP6-IP6 |   --   |IP6-IP6| --|
| headers |    |             |        |  (RPI1) |        | (RPI2)|   |
+---------+----+-------------+--------+---------+--------+-------+---+
|Untouched| -- |     --      |   --   |    --   |   --   | --    | --|
| headers |    |             |        |         |        |       |   |
+---------+----+-------------+--------+---------+--------+-------+---+
                 ]]></artwork></figure>
                 </t>
               </section>
       </section>
  </section>

       <section title="Non Storing mode">

         <t>
          In Non Storing Mode (Non-SM) (fully source routed),
          the 6LBR (DODAG root) has complete knowledge about the
          connectivity of all DODAG nodes, and all traffic flows
          through the root node. Thus, there is no need for all nodes to
          know about the existence of RPL-unaware nodes.
          Only the 6LBR needs to act if compensation is necessary for not-RPL
          aware receivers.
         </t>
         <t>
           The table (<xref target="fig_table_non-storing" />) summarizes what headers are needed in the following
           scenarios, and indicates when the RPI, RH3 and IPv6-in-IPv6 header
           are to be inserted.  The last column depicts the
           target destination of the IPv6-in-IPv6 header: 6LN (indicated by "RAL"), 6LR (parent of a RUL) or the root.
           In cases where no IPv6-in-IPv6 header is needed, the column indicates "No".
           There is no expectation on RPL that RPI can be omitted, because it is needed for routing, quality of service and compression.
           This specification expects that an RPI is always present.
           The term "may(up)" means that the IPv6-in-IPv6 header may be necessary in the upwards direction.
           The term "must(up)" means that the IPv6-in-IPv6 header must be present in the upwards direction.
           The term "must(down)" means that the IPv6-in-IPv6 header must be present in the downward direction.
         </t>
         <t>
           The leaf can be a router 6LR or a host, both indicated as 6LN (<xref target="fig_CommonTopology"/>). In the table (<xref target="fig_table_non-storing" />) the
           (1) indicates a 6tisch case <xref target="RFC8180"/>, where the RPI may still be needed
          for the RPLInstanceID to be available for priority/channel selection at each hop.
         </t>
         <t>

          <figure title="Table that shows headers needed in Non-Storing mode: RPI, RH3, IPv6-in-IPv6 encapsulation." anchor="fig_table_non-storing" align="center">
            <artwork><![CDATA[
+--- ------------+-------------+-----+-----+--------------+----------+
|  Interaction   |   Use Case  | RPI | RH3 | IPv6-in-IPv6 | IP-in-IP |
|     between    |             |     |     |              |    dst   |
+----------------+-------------+-----+-----+--------------+----------+
|                | RAL to root | Yes |  No |      No      |    No    |
|                +-------------+-----+-----+--------------+----------+
|  Leaf - Root   | root to RAL | Yes | Yes |      No      |    No    |
|                +-------------+-----+-----+--------------+----------+
|                | root to RUL | Yes | Yes |      No      |    6LR   |
|                |             | (1) |     |              |          |
|                +-------------+-----+-----+--------------+----------+
|                | RUL to root | Yes |  No |     must     |   root   |
+----------------+-------------+-----+-----+--------------+----------+
|                |  RAL to Int | Yes |  No |    may(up)   |   root   |
|                +-------------+-----+-----+--------------+----------+
|Leaf - Internet |  Int to RAL | Yes | Yes |     must     |    RAL   |
|                +-------------+-----+-----+--------------+----------+
|                |  RUL to Int | Yes |  No |     must     |   root   |
|                +-------------+-----+-----+--------------+----------+
|                |  Int to RUL | Yes | Yes |     must     |    6LR   |
+----------------+-------------+-----+-----+--------------+----------+
|                |  RAL to RAL | Yes | Yes |    may(up)   |   root   |
|                |             |     |     +--------------+----------+
|                |             |     |     |  must(down)  |    RAL   |
|  Leaf - Leaf   +-------------+-----+-----+--------------+----------+
|                |  RAL to RUL | Yes | Yes |    may(up)   |   root   |
|                |             |     |     +--------------+----------+
|                |             |     |     |  must(down)  |    6LR   |
|                +-------------+-----+-----+--------------+----------+
|                |  RUL to RAL | Yes | Yes |   must(up)   |   root   |
|                |             |     |     +--------------+----------+
|                |             |     |     |  must(down)  |    RAL   |
|                +-------------+-----+-----+--------------+----------+
|                |  RUL to RUL | Yes | Yes |   must(up)   |   root   |
|                |             |     |     +--------------+----------+
|                |             |     |     |  must(down)  |    6LR   |
+----------------+-------------+-----+-----+--------------+----------+
]]></artwork></figure>
          </t>

          <section title="Non-Storing Mode: Interaction between Leaf and Root">

             <t>
              In this section is described the communication flow
              in Non Storing Mode (Non-SM) between,
             </t>
             <t>
              <list>
                <t>
                  RAL  to root
                </t>
                <t>
                  root to RAL
                </t>
                <t>
                  RUL  to root
                </t>
                <t>
                  root to RUL
                </t>
              </list>
             </t>

               <section title="Non-SM: Example of Flow from RAL to root">
                 <t>
                   In non-storing mode the leaf node uses default
                   routing to send traffic to the root. The RPI must be included
                   since it contains the rank information, which is used to
                   avoid/detect loops.
                 </t>

                 <t>
                   RAL (6LN) --> 6LR_i --> root(6LBR)
                 </t>
                 <t>
                   For example, a communication flow could be: Node F --> Node D --> Node B --> Node A (root)
                 </t>
                 <t>
                   6LR_i represents the intermediate routers from source to destination.
                   In this case, 1 &lt;= i &lt;= n, where n is the total number of routers (6LR)
                   that the packet goes through from source (RAL) to destination (6LBR).
                 </t>
                 <t>
                   This situation is the same case as storing mode.
                 </t>
                 <t>
                 The <xref target="NonStoring-summary-headers"/> summarizes what headers are needed for this use case.
                 </t>

                 <t>
                 <figure title="Non-SM: Summary of the use of headers from RAL to root" anchor="NonStoring-summary-headers" align="center">
                   <artwork><![CDATA[
                 +-----------+-----+-------+------+
                 |   Header  | RAL | 6LR_i | 6LBR |
                 |           | src |       |  dst |
                 +-----------+-----+-------+------+
                 |   Added   | RPI |   --  |  --  |
                 |  headers  |     |       |      |
                 +-----------+-----+-------+------+
                 |  Modified |  -- |  RPI  |  --  |
                 |  headers  |     |       |      |
                 +-----------+-----+-------+------+
                 |  Removed  |  -- |   --  |  RPI |
                 |  headers  |     |       |      |
                 +-----------+-----+-------+------+
                 | Untouched |  -- |   --  |  --  |
                 |  headers  |     |       |      |
                 +-----------+-----+-------+------+
                 ]]></artwork></figure>
                 </t>
               </section>

               <section anchor="nsroottoRAL" title=" Non-SM: Example of Flow from root to RAL">
                 <t>
                   In this case the flow comprises:
                 </t>
                 <t>

                         root (6LBR) --> 6LR_i --> RAL (6LN)
                 </t>
                 <t>
                 For example, a communication flow could be: Node A (root) --> Node B --> Node D --> Node F
                 </t>
                 <t>
                   6LR_i represents the intermediate routers from source to destination.
                   In this case, 1 &lt;= i &lt;= n, where n is the total number of routers (6LR)
                   that the packet goes through from source (6LBR) to destination (RAL).
                 </t>
                 <t>
                   The 6LBR inserts an RH3, and an RPI.
                   No IPv6-in-IPv6 header is necessary as the traffic
                   originates with a RPL aware node, the 6LBR.
                   The destination is known to be RPL-aware because the root
                   knows the whole topology in non-storing mode.
                 </t>
                 <t>
                 The <xref target="NonStoring-root2rpl"/> summarizes what headers are needed for this use case.
                 </t>

                 <t>
                 <figure title="Non-SM: Summary of the use of headers from root to RAL" anchor="NonStoring-root2rpl" align="center">
                   <artwork><![CDATA[
+-----------+----------+----------+----------+
|   Header  |   6LBR   |   6LR_i  |    RAL   |
|           |    src   |          |    dst   |
+-----------+----------+----------+----------+
|   Added   | RPI, RH3 |    --    |    --    |
|  headers  |          |          |          |
+-----------+----------+----------+----------+
|  Modified |    --    | RPI, RH3 |    --    |
|  headers  |          |          |          |
+-----------+----------+----------+----------+
|  Removed  |    --    |    --    | RPI, RH3 |
|  headers  |          |          |          |
+-----------+----------+----------+----------+
| Untouched |    --    |    --    |    --    |
|  headers  |          |          |          |
+-----------+----------+----------+----------+
                 ]]></artwork></figure>
                 </t>
               </section>

               <section title=" Non-SM: Example of Flow from root to RUL">
                        <t>
                                In this case the flow comprises:
                        </t>
                        <t>
                                root (6LBR) --> 6LR_i --> RUL (IPv6 dst node)
                        </t>
                        <t>
                        For example, a communication flow could be: Node A (root) --> Node B --> Node E --> Node G (RUL)
                        </t>
                        <t>
                          6LR_i represents the intermediate routers from source to destination.
                          In this case, 1 &lt;= i &lt;= n, where n is the total number of routers (6LR)
                          that the packet goes through from source (6LBR) to destination (RUL).
                        </t>
                        <t>
                          In the 6LBR, the RH3 is added; it is then modified at each
                          intermediate 6LR (6LR_1 and so on), and it is fully consumed in the
                          last 6LR (6LR_n) but is left in place.  When the RPI is added, the
                          RUL, which does not understand the RPI, will ignore it (per
                          <xref target="RFC8200"/>); thus, encapsulation is not necessary.
                        </t>
                        <t>
                        The <xref target="NonStoring-root2notrpl"/> depicts the table that summarizes what headers are needed for this use case.
                        </t>
                        <t>
                        <figure title=" Non-SM: Summary of the use of headers from root to RUL" anchor="NonStoring-root2notrpl" align="center">
                          <artwork><![CDATA[
+-----------+----------+--------------+----------------+----------+
|   Header  |   6LBR   |     6LR_i    |      6LR_n     |   RUL    |
|           |    src   | i=(1,..,n-1) |                |   dst    |
|           |          |              |                |          |
+-----------+----------+--------------+----------------+----------+
|   Added   | RPI, RH3 |      --      |       --       |    --    |
|  headers  |          |              |                |          |
+-----------+----------+--------------+----------------+----------+
|  Modified |    --    |   RPI, RH3   |      RPI,      |    --    |
|  headers  |          |              | RH3(consumed)  |          |
+-----------+----------+--------------+----------------+----------+
|  Removed  |    --    |      --      |    --          |    --    |
|  headers  |          |              |                |          |
+-----------+----------+--------------+----------------+----------+
| Untouched |    --    |      --      |       --       | RPI, RH3 |
|  headers  |          |              |                |  (both   |
|           |          |              |                | ignored) |
+-----------+----------+--------------+----------------+----------+
                        ]]></artwork></figure>
                                  </t>
               </section>

               <section title="Non-SM: Example of Flow from RUL to root">
                        <t>
                                In this case the flow comprises:
                        </t>
                        <t>

                                RUL (IPv6 src node) --> 6LR_1 --> 6LR_i --> root (6LBR) dst
                        </t>
                        <t>
                        For example, a communication flow could be: Node G --> Node E --> Node B --> Node A (root)
                        </t>
                        <t>
                          6LR_i represents the intermediate routers from source to destination.
                          In this case, 1 &lt;= i &lt;= n, where n is the total number of routers (6LR)
                          that the packet goes through from source (RUL) to destination (6LBR).
                          For example, 6LR_1 (i=1) is the router that receives the packets from the
                          RUL.
                        </t>
                        <t>
                          In this case, the RPI is added by the first 6LR (6LR_1) (Node E),
                          encapsulated in an IPv6-in-IPv6 header, and modified in the
                          subsequent 6LRs in the flow. The RPI and the
                          entire packet are consumed by the root.
                        </t>
                        <t>
                        The <xref target="NonStoring-notrpl2root"/> shows the table that summarizes what headers are needed for this use case.
                        </t>
                        <t>
                        <figure title="Non-SM: Summary of the use of headers from RUL to root" anchor="NonStoring-notrpl2root" align="center">
            <artwork><![CDATA[
+---------+----+-----------------+-----------------+-----------------+
|         |RUL |                 |                 |                 |
|  Header |src |      6LR_1      |      6LR_i      |     6LBR dst    |
|         |node|                 |                 |                 |
+---------+----+-----------------+-----------------+-----------------+
|  Added  | -- |IPv6-in-IPv6(RPI)|        --       |        --       |
| headers |    |                 |                 |                 |
+---------+----+-----------------+-----------------+-----------------+
| Modified| -- |        --       |       RPI       |        --       |
| headers |    |                 |                 |                 |
+---------+----+-----------------+-----------------+-----------------+
| Removed | -- |        --       |        --       |IPv6-in-IPv6(RPI)|
| headers |    |                 |                 |                 |
+---------+----+-----------------+-----------------+-----------------+
|Untouched| -- |        --       |        --       |        --       |
| headers |    |                 |                 |                 |
+---------+----+-----------------+-----------------+-----------------+
]]></artwork></figure>
</t>
               </section>
            </section>

               <section title="Non-Storing Mode: Interaction between Leaf and Internet">

                  <t>
                   This section will describe the communication flow in Non Storing Mode (Non-SM) between:
                  </t>
                  <t>
                   <list>
                     <t>
                       RAL to Internet
                     </t>
                     <t>
                       Internet to RAL
                     </t>
                     <t>
                       RUL to Internet
                     </t>
                     <t>
                       Internet to RUL
                     </t>
                   </list>
                  </t>

               <section title="Non-SM: Example of Flow from RAL to Internet">
                        <t>
                                In this case the flow comprises:
                        </t>
                        <t>
                                RAL (6LN) src --> 6LR_i --> root (6LBR) --> Internet dst
                        </t>
                        <t>
                        For example, a communication flow could be: Node F (RAL) --> Node D --> Node B --> Node A --> Internet.
                        Having the RAL information about the RPL domain, the packet may be encapsulated to the root when the destination is not in the RPL domain of the RAL.
                        </t>
                        <t>
                          6LR_i represents the intermediate routers from source to destination,
                          1 &lt;= i &lt;= n, where n is the total number of routers (6LR)
                          that the packet goes through from source (RAL) to 6LBR.
                        </t>
                        <t>
                              In this case, the encapsulation from the RAL to the root is optional.
                              The simplest case is when the RPI gets to the Internet (as the <xref target="NonStoring-rpl2int"/> shows it), knowing that the Internet is
                              going to ignore it.
                        </t>
                        <t>
                          The IPv6 flow label should be set to zero to aid
                          in compression <xref target="RFC8138"/>, and the 6LBR will set it to a
                          non-zero value when sending towards the Internet  <xref target="RFC6437"/>.
                        </t>
                        <t>
                        The <xref target="NonStoring-rpl2int"/> summarizes what headers are needed for this use case
                        when no encapsulation is used.
                        The <xref target="NonStoring-rpl2intwithIPIP"/> summarizes what headers are needed
                        for this use case when encapsulation to the root is used.
                        </t>
                        <t>
                        <figure title="Non-SM: Summary of the use of headers from RAL to Internet with no encapsulation" anchor="NonStoring-rpl2int" align="center">
                          <artwork><![CDATA[
+-----------+-----+-------+------+-----------+
|   Header  | RAL | 6LR_i | 6LBR |  Internet |
|           | src |       |      |    dst    |
+-----------+-----+-------+------+-----------+
|   Added   | RPI |   --  |  --  |     --    |
|  headers  |     |       |      |           |
+-----------+-----+-------+------+-----------+
|  Modified |  -- |  RPI  |  RPI |     --    |
|  headers  |     |       |      |           |
+-----------+-----+-------+------+-----------+
|  Removed  |  -- |   --  |  --  |     --    |
|  headers  |     |       |      |           |
+-----------+-----+-------+------+-----------+
| Untouched |  -- |   --  |  --  |    RPI    |
|  headers  |     |       |      | (Ignored) |
+-----------+-----+-------+------+-----------+
                        ]]></artwork></figure>
                        </t>

                        <t>
                        <figure title="Non-SM: Summary of the use of headers from RAL to Internet with encapsulation to the root" anchor="NonStoring-rpl2intwithIPIP" align="center">
                          <artwork><![CDATA[
+-----------+--------------+--------------+--------------+----------+
|   Header  |      RAL     |     6LR_i    |     6LBR     | Internet |
|           |      src     |              |              |    dst   |
+-----------+--------------+--------------+--------------+----------+
|   Added   | IPv6-in-IPv6 |      --      |      --      |    --    |
|  headers  |     (RPI)    |              |              |          |
+-----------+--------------+--------------+--------------+----------+
|  Modified |      --      |              |      --      |    --    |
|  headers  |              |     RPI      |              |          |
+-----------+--------------+--------------+--------------+----------+
|  Removed  |      --      |      --      | IPv6-in-IPv6 |    --    |
|  headers  |              |              |     (RPI)    |          |
+-----------+--------------+--------------+--------------+----------+
| Untouched |      --      |      --      |      --      |    --    |
|  headers  |              |              |              |          |
+-----------+--------------+--------------+--------------+----------+
                        ]]></artwork></figure>
                        </t>
               </section>

               <section title="Non-SM: Example of Flow from Internet to RAL">
                        <t>
                                In this case the flow comprises:
                        </t>
                        <t>

                                Internet --> root (6LBR) --> 6LR_i --> RAL dst (6LN)
                        </t>
                        <t>
                        For example, a communication flow could be: Internet --> Node A (root) --> Node B --> Node D --> Node F (RAL)
                        </t>
                        <t>
                          6LR_i represents the intermediate routers from source to destination,
                          1 &lt;= i &lt;= n, where n is the total number of routers (6LR)
                          that the packet goes through from 6LBR to destination (RAL).
                        </t>
                        <t>
                          The 6LBR must add an RH3 header.  As the 6LBR will
                          know the path and address of the target node, it can
                          address the IPv6-in-IPv6 header to that node.
                          The 6LBR will zero the flow label upon entry in
                          order to aid compression <xref target="RFC8138"/>.
                        </t>
                        <t>
                        The <xref target="NonStoring-int2rpl"/> summarizes what headers are needed for this use case.
                        </t>
                        <t>
                        <figure title="Non-SM: Summary of the use of headers from Internet to RAL" anchor="NonStoring-int2rpl" align="center">
                          <artwork><![CDATA[
+-----------+----------+--------------+--------------+--------------+
|   Header  | Internet |     6LBR     |     6LR_i    |      RAL     |
|           |    src   |              |              |      dst     |
+-----------+----------+--------------+--------------+--------------+
|   Added   |    --    | IPv6-in-IPv6 |      --      |      --      |
|  headers  |          |  (RH3, RPI)  |              |              |
+-----------+----------+--------------+--------------+--------------+
|  Modified |    --    |      --      | IPv6-in-IPv6 |      --      |
|  headers  |          |              |  (RH3, RPI)  |              |
+-----------+----------+--------------+--------------+--------------+
|  Removed  |    --    |      --      |      --      | IPv6-in-IPv6 |
|  headers  |          |              |              |  (RH3, RPI)  |
+-----------+----------+--------------+--------------+--------------+
| Untouched |    --    |      --      |      --      |      --      |
|  headers  |          |              |              |              |
+-----------+----------+--------------+--------------+--------------+
                        ]]></artwork></figure>
                        </t>
               </section>

               <section title="Non-SM: Example of Flow from RUL to Internet">
                        <t>
                                In this case the flow comprises:
                        </t>
                        <t>
                          RUL (IPv6 src node) --> 6LR_1 --> 6LR_i -->root (6LBR) --> Internet dst
                        </t>
                        <t>
                        For example, a communication flow could be: Node G --> Node E --> Node B --> Node A --> Internet
                        </t>
                        <t>
                          6LR_i represents the intermediate routers from source to destination,
                          1 &lt;= i &lt;= n, where n is the total number of routers (6LRs) that the
                          packet goes through from the source (RUL) to the 6LBR, e.g., 6LR_1 (i=1).
                        </t>
                        <t>
                                In this case the flow label is recommended to
                                be zero in the RUL.  As the RUL parent adds  RPL headers in the RUL packet,
                                the first 6LR (6LR_1) will add an RPI inside a new IPv6-in-IPv6 header.
                                The IPv6-in-IPv6 header will be addressed to the
                                root.  This case is identical to the
                                storing-mode case (see <xref target="sm-nRal2i" />).
                        </t>
                        <t>
                        The <xref target="NonStoring-notrpl2int"/> shows the table that summarizes what headers are needed for this use case.

                        </t>
                        <t>
                        <figure title="Non-SM: Summary of the use of headers from RUL to Internet" anchor="NonStoring-notrpl2int" align="center">
                                    <artwork><![CDATA[
+---------+----+-------------+--------------+--------------+--------+
|  Header |RUL |    6LR_1    |     6LR_i    |     6LBR     |Internet|
|         |src |             |  [i=2,..,n]  |              |  dst   |
|         |node|             |              |              |        |
+---------+----+-------------+--------------+--------------+--------+
|  Added  | -- |IP6-IP6(RPI) |      --      |      --      |   --   |
| headers |    |             |              |              |        |
+---------+----+-------------+--------------+--------------+--------+
| Modified| -- |     --      |     RPI      |      --      |   --   |
| headers |    |             |              |              |        |
+---------+----+-------------+--------------+--------------+--------+
| Removed | -- |     --      |      --      | IP6-IP6(RPI) |   --   |
| headers |    |             |              |              |        |
+---------+----+-------------+--------------+--------------+--------+
|Untouched| -- |     --      |      --      |      --      |   --   |
| headers |    |             |              |              |        |
+---------+----+-------------+--------------+--------------+--------+
                        ]]></artwork></figure>
                        </t>
               </section>

               <section title="Non-SM: Example of Flow from Internet to RUL">

                        <t>
                                In this case the flow comprises:
                        </t>
                        <t>

                                Internet src --> root (6LBR) --> 6LR_i --> RUL (IPv6 dst node)
                        </t>
                        <t>
                        For example, a communication flow could be: Internet --> Node A (root) --> Node B --> Node E --> Node G
                        </t>
                        <t>
                          6LR_i represents the intermediate routers from source to destination,
                          1 &lt;= i &lt;= n, where n is the total number of routers (6LR)
                          that the packet goes through from 6LBR to RUL.
                        </t>

                        <t>
                          The 6LBR must add an RH3 header inside an IPv6-in-IPv6
                          header.
                          The 6LBR will know the path, and will recognize
                          that the final node is not a RPL capable node as
                          it will have received the connectivity DAO from the
                          nearest 6LR.  The 6LBR can therefore make the IPv6-in-IPv6
                          header destination be the last 6LR.
                          The 6LBR will set to zero the flow label upon entry in
                          order to aid compression <xref target="RFC8138"/>.
                        </t>
                        <t>
                        The <xref target="NonStoring-int2notrpl"/> shows the table that summarizes what headers are needed for this use case.
                        </t>
                        <t>
                        <figure title="Non-SM: Summary of the use of headers from Internet to RUL." anchor="NonStoring-int2notrpl" align="center">
                                    <artwork><![CDATA[
+----------+--------+------------------+-----------+-----------+-----+
|  Header  |Internet|       6LBR       |   6LR_i   |   6LR_n   | RUL |
|          |   src  |                  |           |           | dst |
+----------+--------+------------------+-----------+-----------+-----+
|  Added   |   --   | IP6-IP6(RH3,RPI) |     --    |     --    |  -- |
| headers  |        |                  |           |           |     |
+----------+--------+------------------+-----------+-----------+-----+
| Modified |   --   |        --        |  IP6-IP6  |     --    |  -- |
| headers  |        |                  | (RH3,RPI) |           |     |
+----------+--------+------------------+-----------+-----------+-----+
| Removed  |   --   |        --        |     --    |  IP6-IP6  |  -- |
| headers  |        |                  |           | (RH3,RPI) |     |
+----------+--------+------------------+-----------+-----------+-----+
|Untouched |   --   |        --        |     --    |     --    |  -- |
| headers  |        |                  |           |           |     |
+----------+--------+------------------+-----------+-----------+-----+
                        ]]></artwork></figure>
                        </t>
               </section>

             </section>

                <section title="Non-SM: Interaction between leaves">

                   <t>
                    In this section is described the communication flow
                    in Non Storing Mode (Non-SM) between,
                   </t>
                   <t>
                    <list>
                      <t>
                        RAL to RAL
                      </t>
                      <t>
                        RAL to RUL
                      </t>
                      <t>
                        RUL to RAL
                      </t>
                      <t>
                        RUL to RUL
                      </t>
                    </list>
                   </t>

               <section title="Non-SM: Example of Flow from RAL to RAL">
                        <t>
                        In this case the flow comprises:
                        </t>
                        <t>
                         RAL src --> 6LR_ia --> root (6LBR) --> 6LR_id -->  RAL dst
                        </t>
                        <t>
                        For example, a communication flow could be: Node F (RAL src)--> Node D --> Node B --> Node A (root) --> Node B --> Node E --> Node H (RAL dst)
                        </t>
                        <t>
                          6LR_ia represents the intermediate routers from source to the root,
                          1 &lt;= ia &lt;= n, where n is the total number of routers (6LR)
                          that the packet goes through from RAL to the root.
                        </t>
                        <t>
                          6LR_id represents the intermediate routers from the root to the destination,
                          1 &lt;= id &lt;= m, where m is the total number of the
                          intermediate routers (6LR).
                        </t>
                        <t>
                          This case involves only nodes in same RPL domain.
                          The originating node will add an RPI to the
                          original packet, and send the packet upwards.
                        </t>
                        <t>
                          The originating node may put the RPI (RPI1) into an IPv6-in-IPv6
                          header addressed to the root, so that the 6LBR can remove that
                          header.  If it does not, then the RPI1 is forwarded down from the
                          root in the inner header to no avail.
                        </t>
                        <t>
                          The 6LBR will need to insert an RH3 header, which
                          requires that it add an IPv6-in-IPv6 header.
                          It removes the RPI(RPI1), as it was contained in an
                          IPv6-in-IPv6 header addressed to it.  Otherwise, there may
                          be an RPI buried inside the inner IP header,
                          which should get ignored. The root inserts an RPI (RPI2) alongside the RH3.
                        </t>

                 <t>
                   Networks that use the RPL P2P extension <xref target="RFC6997" />
                   are essentially non-storing DODAGs and fall into this
                   scenario or scenario <xref target="nsroottoRAL"/>, with
                   the originating node acting as 6LBR.
                 </t>
                 <t>
                 The <xref target="NonStoring-rpl2rpl"/> shows the table that summarizes what headers
                 are needed for this use case when encapsulation to the root takes place.
                 </t>
                 <t>
                 The <xref target="NonStoring-rpl2rplnoIPIP"/> shows the table that summarizes what headers
                 are needed for this use case when there is no encapsulation to the root.
                 Note that in the Modified headers row, going up in each 6LR_ia only the RPI1 is changed.
                 Going down, in each 6LR_id the IPv6 header is swapped with the RH3 so both are changed alongside with the RPI2. 
                 </t>
                 <t>
                 <figure title="Non-SM: Summary of the Use of Headers from RAL to RAL with encapsulation to the root." anchor="NonStoring-rpl2rpl" align="center">
                             <artwork><![CDATA[
+---------+-------+----------+------------+----------+------------+
|  Header | RAL   |   6LR_ia |    6LBR    | 6LR_id   |     RAL    |
|         | src   |          |            |          |     dst    |
+---------+-------+----------+------------+----------+------------+
|  Added  |IP6-IP6|          |  IP6-IP6   |  --      |     --     |
| headers |(RPI1) |   --     |(RH3-> RAL, |          |            |
|         |       |          |   RPI2)    |          |            |
+---------+-------+----------+------------+----------+------------+
| Modified|  --   |          |    --      | IP6-IP6  |    --      |
| headers |       |   RPI1   |            |(RH3,RPI2)|            |
+---------+-------+----------+------------+----------+------------+
| Removed |    -- |    --    |   IP6-IP6  |  --      |  IP6-IP6   |
| headers |       |          |   (RPI1)   |          |   (RH3,    |
|         |       |          |            |          |   RPI2)    |
+---------+-------+----------+------------+----------+------------+
|Untouched|    -- |    --    |    --      |  --      |    --      |
| headers |       |          |            |          |            |
+---------+-------+----------+------------+----------+------------+
                 ]]></artwork></figure>
                 </t>
                 <t>
                 <figure title="Non-SM: Summary of the Use of Headers from RAL to RAL without encapsulation
                    to the root." anchor="NonStoring-rpl2rplnoIPIP" align="center">
                             <artwork><![CDATA[
+-----------+------+--------+---------+---------+---------+
|   Header  |  RAL | 6LR_ia |   6LBR  |  6LR_id |   RAL   |
+-----------+------+--------+---------+---------+---------+
|  Inserted | RPI1 |   --   | IP6-IP6 |    --   |    --   |
|  headers  |      |        |  (RH3,  |         |         |
|           |      |        |   RPI2) |         |         |
+-----------+------+--------+---------+---------+---------+
|  Modified |  --  |  RPI1  |    --   | IP6-IP6 |    --   |
|  headers  |      |        |         |  (RH3,  |         |
|           |      |        |         |   RPI2) |         |
+-----------+------+--------+---------+---------+---------+
|  Removed  |  --  |   --   |    --   |    --   | IP6-IP6 |
|  headers  |      |        |         |         |  (RH3,  |
|           |      |        |         |         |   RPI2) |
|           |      |        |         |         |         |
+-----------+------+--------+---------+---------+---------+
| Untouched |  --  |   --   |   RPI1  |   RPI1  |   RPI1  |
|  headers  |      |        |         |         |(Ignored)|
+-----------+------+--------+---------+---------+---------+
                 ]]></artwork></figure>
                 </t>
               </section>

               <section title="Non-SM: Example of Flow from RAL to RUL">
                        <t>
                        In this case the flow comprises:
                        </t>
                        <t>
                         RAL --> 6LR_ia --> root (6LBR) --> 6LR_id -->  RUL (IPv6 dst node)
                        </t>
                        <t>
                        For example, a communication flow could be: Node F (RAL) --> Node D --> Node B --> Node A (root) --> Node B --> Node E --> Node G (RUL)
                        </t>
                        <t>
                          6LR_ia represents the intermediate routers from source to the root,
                          1 &lt;= ia &lt;= n, where n is the total number of intermediate routers (6LR)
                        </t>
                        <t>
                          6LR_id represents the intermediate routers from the root to the destination,
                           1 &lt;= id &lt;= m, where m is the total number of the
                          intermediate routers (6LRs).
                        </t>
                        <t>
                          As in the previous case, the RAL (6LN) may insert an RPI (RPI1)
                          header which must be in an IPv6-in-IPv6 header addressed to
                          the root so that the 6LBR can remove this RPI.
                          The 6LBR will then insert an RH3 inside a new IPv6-in-IPv6
                          header addressed to the last 6LR_id (6LR_id = m) alongside the insertion of RPI2.
                        </t>
                        <t>
                          If the originating node does not put the RPI (RPI1) into an IPv6-in-IPv6
                          header addressed to the root. Then, the RPI1 is forwarded down from the
                          root in the inner header to no avail.
                        </t>
                        <t>
                        The <xref target="NonStoring-rpl2notrpl"/> shows the table that summarizes what headers
                        are needed for this use case when encapsulation to the root takes place.
                        The <xref target="NonStoring-rpl2notrplnoIPIP"/> shows the table that summarizes what headers
                        are needed for this use case when no encapsulation to the root takes place.
                        </t>
                        <t>
                        <figure  title="Non-SM: Summary of the use of headers from RAL
                        to RUL with encapsulation to the root." anchor="NonStoring-rpl2notrpl" align="center">
                                    <artwork><![CDATA[
+-----------+---------+---------+---------+---------+---------+------+
|   Header  |   RAL   |  6LR_ia |   6LBR  |  6LR_id |  6LR_m  | RUL  |
|           |   src   |         |         |         |         | dst  |
|           |   node  |         |         |         |         | node |
+-----------+---------+---------+---------+---------+---------+------+
|   Added   | IP6-IP6 |         | IP6-IP6 |    --   |    --   |  --  |
|  headers  |  (RPI1) | --      |  (RH3,  |         |         |      |
|           |         |         |   RPI2) |         |         |      |
+-----------+---------+---------+---------+---------+---------+------+
|  Modified |    --   |         |    --   | IP6-IP6 |         |  --  |
|  headers  |         |  RPI1   |         |  (RH3,  |  --     |      |
|           |         |         |         |   RPI2) |         |      |
+-----------+---------+---------+---------+---------+---------+------+
|  Removed  |    --   |    --   | IP6-IP6 |    --   | IP6-IP6 |  --  |
|  headers  |         |         |  (RPI1) |         |  (RH3,  |      |
|           |         |         |         |         |   RPI2) |      |
+-----------+---------+---------+---------+---------+---------+------+
| Untouched |    --   |    --   |    --   |    --   |    --   |  --  |
|  headers  |         |         |         |         |         |      |
+-----------+---------+---------+---------+---------+---------+------+
                        ]]></artwork></figure>
                        </t>
                        <t>
                        <figure  title="Non-SM: Summary of the use of headers from RAL
                        to RUL without encapsulation to the root." anchor="NonStoring-rpl2notrplnoIPIP" align="center">
                                    <artwork><![CDATA[
+-----------+------+--------+---------+---------+---------+---------+
|   Header  |  RAL | 6LR_ia |   6LBR  |  6LR_id |  6LR_n  |   RUL   |
|           |  src |        |         |         |         |   dst   |
|           | node |        |         |         |         |   node  |
+-----------+------+--------+---------+---------+---------+---------+
|  Inserted | RPI1 |   --   | IP6-IP6 |    --   |    --   |    --   |
|  headers  |      |        |  (RH3,  |         |         |         |
|           |      |        |   RPI2) |         |         |         |
+-----------+------+--------+---------+---------+---------+---------+
|  Modified |  --  |  RPI1  |    --   | IP6-IP6 |    --   |    --   |
|  headers  |      |        |         |  (RH3,  |         |         |
|           |      |        |         |   RPI2) |         |         |
+-----------+------+--------+---------+---------+---------+---------+
|  Removed  |  --  |   --   |    --   |    --   | IP6-IP6 |    --   |
|  headers  |      |        |         |         |  (RH3,  |         |
|           |      |        |         |         |   RPI2) |         |
+-----------+------+--------+---------+---------+---------+---------+
| Untouched |  --  |   --   |   RPI1  |   RPI1  |   RPI1  |   RPI1  |
|  headers  |      |        |         |         |         |(Ignored)|
+-----------+------+--------+---------+---------+---------+---------+

                        ]]></artwork></figure>
                        </t>

               </section>

               <section title="Non-SM: Example of Flow from RUL to RAL">

                        <t>
                        In this case the flow comprises:
                        </t>
                        <t>
                         RUL (IPv6 src node) --> 6LR_1 --> 6LR_ia --> root (6LBR) --> 6LR_id --> RAL dst (6LN)
                        </t>
                        <t>
                        For example, a communication flow could be: Node G (RUL)--> Node E --> Node B --> Node A (root) --> Node B --> Node E --> Node H (RAL)
                        </t>
                        <t>
                          6LR_ia represents the intermediate routers from source to the root,
                          1 &lt;= ia &lt;= n, where n is the total number of intermediate routers (6LR)
                        </t>
                        <t>
                          6LR_id represents the intermediate routers from the root to the destination,
                          1 &lt;= id &lt;= m, where m is the total number of the
                          intermediate routers (6LR).
                        </t>
                        <t>
                          In this scenario the RPI (RPI1) is added by the first 6LR (6LR_1) inside an
                          IPv6-in-IPv6 header addressed to the root.  The 6LBR will
                          remove this RPI, and add its own IPv6-in-IPv6 header
                          containing an RH3 header and an RPI (RPI2).
                        </t>
                        <t>
                        The <xref target="NonStoring-notrpl2rpl"/> shows the table that summarizes what headers are needed for this use case.

                        </t>
                        <t>
                        <figure title="Non-SM: Summary of the use of headers from RUL to RAL." anchor="NonStoring-notrpl2rpl"  align="center">
                                    <artwork><![CDATA[
+----------+------+---------+---------+---------+---------+---------+
|  Header  | RUL  |  6LR_1  |  6LR_ia |   6LBR  |  6LR_id |   RAL   |
|          | src  |         |         |         |         |   dst   |
|          | node |         |         |         |         |   node  |
+----------+------+---------+---------+---------+---------+---------+
|  Added   |  --  | IP6-IP6 |    --   | IP6-IP6 |    --   |    --   |
| headers  |      |  (RPI1) |         |  (RH3,  |         |         |
|          |      |         |         |   RPI2) |         |         |
+----------+------+---------+---------+---------+---------+---------+
| Modified |  --  |         |         |    --   | IP6-IP6 |    --   |
| headers  |      |  --     |  RPI1   |         |  (RH3,  |         |
|          |      |         |         |         |   RPI2) |         |
+----------+------+---------+---------+---------+---------+---------+
| Removed  |  --  |         |    --   | IP6-IP6 |    --   | IP6-IP6 |
| headers  |      | --      |         |  (RPI1) |         |  (RH3,  |
|          |      |         |         |         |         |   RPI2) |
+----------+------+---------+---------+---------+---------+---------+
|Untouched |  --  | --      |    --   |    --   |    --   |    --   |
| headers  |      |         |         |         |         |         |
+----------+------+---------+---------+---------+---------+---------+
                        ]]></artwork></figure>
                        </t>
               </section>

               <section title="Non-SM: Example of Flow from RUL to RUL">

                        <t>
                        In this case the flow comprises:
                        </t>
                        <t>
                         RUL (IPv6 src node) --> 6LR_1 --> 6LR_ia --> root (6LBR) --> 6LR_id --> RUL (IPv6 dst node)
                        </t>
                        <t>
                        For example, a communication flow could be: Node G --> Node E --> Node B --> Node A (root) --> Node C --> Node J
                        </t>
                        <t>
                          6LR_ia represents the intermediate routers from source to the root,
                          1 &lt;= ia &lt;= n, where n is the total number of intermediate routers (6LR)
                        </t>
                        <t>
                          6LR_id represents the intermediate routers from the root to the destination,
                          1 &lt;= id &lt;= m, where m is the total number of the
                          intermediate routers (6LR).
                        </t>
                        <t>
                          This scenario is the combination of the previous two cases.
                        </t>
                        <t>
                        The <xref target="NonStoring-notrpl2notrpl"/> shows the table that summarizes what headers are needed for this use case.

                        </t>
                        <t>
                        <figure title="Non-SM: Summary of the use of headers from RUL to RUL" anchor="NonStoring-notrpl2notrpl"  align="center">
                                    <artwork><![CDATA[
+---------+------+-------+-------+---------+-------+---------+------+
|  Header | RUL  | 6LR_1 | 6LR_ia|   6LBR  |6LR_id |  6LR_m  | RUL  |
|         | src  |       |       |         |       |         | dst  |
|         | node |       |       |         |       |         | node |
+---------+------+-------+-------+---------+-------+---------+------+
|  Added  |  --  |IP6-IP6|  --   | IP6-IP6 |  --   |    --   |  --  |
| headers |      | (RPI1)|       |  (RH3,  |       |         |      |
|         |      |       |       |   RPI2) |       |         |      |
+---------+------+-------+-------+---------+-------+---------+------+
| Modified|  --  |  --   |       |    --   |IP6-IP6|    --   |  --  |
| headers |      |       |  RPI1 |         | (RH3, |         |      |
|         |      |       |       |         |  RPI2)|         |      |
+---------+------+-------+-------+---------+-------+---------+------+
| Removed |  --  |  --   |  --   | IP6-IP6 |  --   | IP6-IP6 |  --  |
| headers |      |       |       |  (RPI1) |       |  (RH3,  |      |
|         |      |       |       |         |       |   RPI2) |      |
+---------+------+-------+-------+---------+-------+---------+------+
|Untouched|  --  |  --   |  --   |    --   |  --   |    --   |  --  |
| headers |      |       |       |         |       |         |      |
+---------+------+-------+-------+---------+-------+---------+------+
                        ]]></artwork></figure>
                        </t>
                      </section>
            </section>

          </section>

          <section title="Operational Considerations of supporting
                          RUL-leaves" anchor="notrplaware">
            <t>
              Roughly half of the situations described in this document
              involve leaf ("host") nodes that do not speak RPL.  These nodes
              fall into two further categories: ones that drop a packet
              that have RPI or RH3 headers, and ones that continue to
              process a packet that has RPI and/or RH3 headers.
            </t>
            <t>
              <xref target="RFC8200" /> provides for new rules that suggest
              that nodes that have not been configured (explicitly) to
              examine Hop-by-Hop headers, should ignore those headers, and
              continue processing the packet.  Despite this, and despite the
              switch from 0x63 to 0x23, there may be nodes that are pre-RFC8200,
              or simply intolerant.  Those nodes will drop packets that
              continue to have RPL artifacts in them.  In general, such
              nodes can not be easily supported in RPL LLNs.
            </t>
            <t>
              There are some specific cases where it is possible to remove
              the RPL artifacts prior to forwarding the packet to the leaf
              host.  The critical thing is that the artifacts have been
              inserted by the RPL root inside an IPv6-in-IPv6 header, and
              that the header has been addressed to the 6LR immediately prior
              to the leaf node. In that case, in the process of removing the
              IPv6-in-IPv6 header, the artifacts can also be removed.
            </t>
            <t>
              The above case occurs whenever traffic originates from the
              outside the LLN (the "Internet" cases above), and non-storing
              mode is used.  In non-storing mode, the RPL root knows the exact topology
              (as it must create the RH3 header) and therefore knows which 6LR is prior to the
              leaf.  For example, in <xref target="fig_CommonTopology"/>, Node E is the 6LR prior to leaf
              Node G, or Node C is the 6LR prior to leaf Node J.
            </t>
            <t>
              Traffic originating from the RPL root (such as when the data
              collection system is co-located on the RPL root), does not
              require an IPv6-in-IPv6 header (in storing or non-storing mode), as the packet
              is originating at the root, and the root can insert the RPI
              and RH3 headers directly into the packet, as it is formed.
              Such a packet is slightly smaller, but only can be sent to
              nodes (whether RPL aware or not), that will tolerate the
              RPL artifacts.
            </t>
            <t>
              An operator that finds itself with a high amount of traffic from the
              RPL root to RPL-not-aware-leaves, will have to do IPv6-in-IPv6
              encapsulation if the leaf is not tolerant of the RPL artifacts.
              Such an operator could otherwise omit this unnecessary header
              if it was certain of the properties of the leaf.
            </t>
            <t>
              As storing mode can not know the final path of the traffic,
              intolerant (that drop packets with RPL artifacts) leaf nodes
              can not be supported.
            </t>
          </section>

       <section title="Operational considerations of introducing 0x23">
         <t>
           This section describes the operational considerations of introducing the new RPI Option Type of 0x23.
         </t>

           <t>
             During bootstrapping the node gets the DIO with the information of RPI Option Type, indicating
             the new RPI in the DODAG Configuration option Flag.
             The DODAG root is in charge to configure the current network to the new value, through DIO
             messages and when all the nodes are set with the new value. The DODAG should change to a new DODAG version.
             In case of rebooting, the node does not remember the RPI Option Type.
             Thus, the DIO is sent with a flag indicating the new RPI Option Type.
           </t>
           <t>
           The DODAG Configuration option is contained in a RPL DIO message, which contains a unique DTSN counter.
           The leaf nodes respond to this message with DAO messages containing the same DTSN.
           This is a normal part of RPL routing; the RPL root therefore knows when the updated
           DODAG Configuration option has been seen by all nodes.
           </t>
           <t>
             Before the migration happens, all the RPL-aware nodes should support both values .
             The migration procedure is triggered when the DIO is sent with the flag
             indicating the new RPI Option Type.
             Namely, it remains at 0x63 until it is sure that the network is capable of 0x23, then it abruptly changes to 0x23.
             The 0x23 RPI Option allows to send packets to not-RPL nodes. The not-RPL nodes should ignore the option and continue processing the packets.
           </t>
           <t>
             As mentioned previously, indicating the new RPI in the DODAG Configuration option flag is a way to avoid the flag day
             (abrupt changeover) in a network using 0x63 as the RPI Option Type value. It is suggested that RPL implementations
             accept both 0x63 and 0x23 RPI Option type values when processing the header  to enable interoperability.
           </t>

      </section>


      <section title="IANA Considerations" anchor="iana">
        <section title="Option Type in RPL Option">
          <t>
            This document updates the registration made in <xref target="RFC6553"/>
            Destination Options and Hop-by-Hop Options registry from 0x63 to 0x23
            as shown in <xref target="fig_IanaRPIOption"/>.
          </t>
          <t>
            <figure title="Option Type in RPL Option.(*)represents this document" anchor="fig_IanaRPIOption" align="center">
              <artwork> <![CDATA[
+-------+-------------------+------------------------+---------- -+
|  Hex  |    Binary Value   |       Description      | Reference  |
+ Value +-------------------+                        +            +
|       | act | chg |  rest |                        |            |
+-------+-----+-----+-------+------------------------+------------+
|  0x23 |  00 |  1  | 00011 |       RPL Option       |[RFCXXXX](*)|
+-------+-----+-----+-------+------------------------+------------+
|  0x63 |  01 |  1  | 00011 | RPL Option(DEPRECATED) | [RFC6553]  |
|       |     |     |       |                        |[RFCXXXX](*)|
+-------+-----+-----+-------+------------------------+------------+
]]></artwork></figure>
          </t>
          <t> DODAG Configuration
          option is updated as follows (<xref target="fig_RPIflagdayConfOption"/>):
          </t>
          <t>
            <figure title="DODAG Configuration option Flag to indicate the RPI-flag-day." anchor="fig_RPIflagdayConfOption" align="center">
              <artwork> <![CDATA[

              +------------+-----------------+---------------+
              | Bit number |   Description   |   Reference   |
              +------------+-----------------+---------------+
              |      3     | RPI 0x23 enable | This document |
              +------------+-----------------+---------------+

              ]]></artwork></figure>
          </t>
        </section>
        <section title="Change to the DODAG Configuration Options Flags registry">
          <t>
            This document requests IANA to change the name of the "DODAG
            Configuration Option Flags" registry to "DODAG Configuration Option Flags
            for MOP 0..6".
          </t>

          <t>This document requests to be mentioned as a reference for this change.</t>

        </section>
        <section title="Change MOP value 7 to Reserved">
          <t>
            This document requests the changing the registration status of value 7 in
            the Mode of Operation registry from Unassigned to Reserved.  This change
            is in support of future work.
          </t>
	  <t>
            This document requests to be mentioned as a reference for this entry in
	    the registry.
          </t>
        </section>
      </section>

        <section anchor="Security" title="Security Considerations">
           <t>
             The security considerations covered in <xref target="RFC6553"/> and
             <xref target="RFC6554"/> apply when the packets are in the RPL
             Domain.
          </t>
          <t>
            The IPv6-in-IPv6 mechanism described in this document is much more
            limited than the general mechanism described in <xref
            target="RFC2473"/>.  The willingness of each node in the LLN to
            decapsulate packets and forward them could be exploited by nodes to
            disguise the origin of an attack.
          </t>

          <t>
            While a typical LLN may be a very poor origin for attack traffic
            (as the networks tend to be very slow,
            and the nodes often have very low duty cycles), given enough
            nodes, LLNs could still have a
            significant impact, particularly if the attack is targeting another LLN.
            Additionally, some uses of RPL involve large backbone ISP scale
            equipment <xref target="I-D.ietf-anima-autonomic-control-plane"/>,
            which may be equipped with multiple 100Gb/s interfaces.
          </t>
          <t>
            Blocking or careful filtering of IPv6-in-IPv6 traffic entering the LLN as
            described above will make sure that any attack that is mounted
            must originate from compromised nodes within the LLN.
            The use of BCP38 <xref target="BCP38"/> filtering at the RPL root on egress traffic will
            both alert the operator to the existence of the attack, as well
            as drop the attack traffic.  As the RPL network is typically
            numbered from a single prefix, which is itself assigned by RPL,
            BCP38 filtering involves a single prefix comparison and should be
            trivial to automatically configure.
          </t>
          <t>
            There are some scenarios where IPv6-in-IPv6 traffic should be allowed to
            pass through the RPL root, such as the IPv6-in-IPv6 mediated
            communications between a new Pledge and the Join
            Registrar/Coordinator (JRC) when
            using <xref target="I-D.ietf-anima-bootstrapping-keyinfra" /> and
            <xref target="I-D.ietf-6tisch-dtsecurity-zerotouch-join" />. This is
            the case for the RPL root to do careful filtering: it occurs only
            when the Join Coordinator is not co-located inside the RPL root.
          </t>

          <t>
            With the above precautions, an attack using IPv6-in-IPv6 tunnels can only be
            by a node within the LLN on another node within the LLN.  Such an
            attack could, of course, be done directly.  An attack of this
            kind is meaningful only if the source addresses are either fake
            or if the point is to amplify return traffic.
            Such an attack, could also be done without the use of IPv6-in-IPv6
            headers using forged source addresses.
            If the attack requires bi-directional communication, then IPv6-in-IPv6
            provides no advantages.
          </t>
          <t>
            Whenever IPv6-in-IPv6 headers are being proposed, there is a concern
            about creating security issues. In the Security Considerations
            section of <xref target="RFC2473"/>, it was suggested that tunnel entry and exit
            points can be secured by securing the IPv6 path between them.   This
            recommendation is not practical for RPL networks.  <xref target="RFC5406" /> goes
            into some detail on what additional details would be needed in order
            to "Use IPsec". Use of ESP would
            prevent <xref target="RFC8138"/> compression (compression must occur before
            encryption), and <xref target="RFC8138"/> compression is lossy in a way that prevents
            use of AH.  These are minor issues.  The major issue is how to
            establish trust enough such that IKEv2 could be used.  This would
            require a system of certificates to be present in every single node,
            including any Internet nodes that might need to communicate with the
            LLN. Thus, using IPsec requires a global PKI in the general case.
          </t>
          <t>
            More significantly, the use of IPsec tunnels to protect the IPv6-in-IPv6
            headers would in the general case scale with the square of the
            number of nodes.  This is a lot of resource for a constrained
            nodes on a constrained network. In the end, the IPsec tunnels
            would be providing only BCP38-like origin authentication!
            That is, IPsec provides a transitive guarantee to the tunnel exit point
            that the tunnel entry point did BCP38 on traffic going in.
            Just doing origin filtering per BCP 38 at the entry and
            exit of the LLN provides a similar level of security without all the
            scaling and trust problems related to IPv6 tunnels as discussed in
            RFC 2473. IPsec is not recommended.
          </t>
          <t>
            An LLN with hostile nodes within it would not be protected against
            impersonation with the LLN by entry/exit filtering.
          </t>

          <t>
            The RH3 header usage described here can be abused in equivalent
            ways (to disguise the origin of traffic and attack other nodes)
            with an IPv6-in-IPv6 header to add the needed RH3
            header. As such, the attacker's RH3 header will not be seen by
            the network until it reaches the end host, which will decapsulate
            it.  An end-host should be suspicious about an RH3 header which
            has additional hops which have not yet been processed, and SHOULD
            ignore such a second RH3 header.
          </t>
          <t>
            In addition, the LLN will likely use <xref
            target="RFC8138" /> to compress the IPv6-in-IPv6
            and RH3 headers. As such, the compressor at the RPL-root will see
            the second RH3 header and MAY choose to discard the packet if the
            RH3 header has not been completely consumed.  A consumed (inert)
            RH3 header could be present in a packet that flows from one LLN,
            crosses the Internet, and enters another LLN.  As per the
            discussion in this document, such headers do not need to be
            removed.  However, there is no case described in this document
            where an RH3 is inserted in a non-storing network on traffic that
            is leaving the LLN, but this document should not preclude such a
            future innovation.  It should just be noted that an incoming RH3
            must be fully consumed, or very carefully inspected to match a
            policy that applies to this network and is correctly processed by
            the leaves.
          </t>
          <t>
            The RPI, if permitted to enter the LLN, could be used by
            an attacker to change the priority of a packet by selecting a
            different RPLInstanceID, perhaps one with a higher energy cost,
            for instance.  It could also be that not all nodes are reachable
            in an LLN using the default RPLInstanceID, but a change of
            RPLInstanceID would permit an attacker to bypass such filtering.
            Like the RH3, an RPI is to be inserted by the RPL root on
            traffic entering the LLN by first inserting an IPv6-in-IPv6 header. The
            attacker's RPI therefore will not be seen by the network.
            Upon reaching the destination node the RPI has no further
            meaning and is just skipped; the presence of a second RPI
            will have no meaning to the end node as the packet has already
            been identified as being at it's final destination.
          </t>
          <t>
            For traffic leaving a RUL, if the RUL adds an opaque RPI then the 6LR as a RPL border
            router SHOULD rewrite the RPI to indicate the selected Instance and set the flags.
            This is done in order to avoid: 1) The leaf is an external router that
            passes a packet that it did not generate and that carries an unrelated RPI
            and 2) The leaf is an attacker or presents misconfiguration and
            tries to inject traffic in a protected instance.
            Also, this applies in the case where the leaf is aware of the RPL instance and passes a correct RPI;
            the 6LR needs a configuration that allows that leaf to inject in that instance.
          </t>
          <t>
            The RH3 and RPIs could be abused by an attacker inside of
            the network to route packets on non-obvious ways, perhaps eluding
            observation.   This usage appears consistent with a normal operation of
            <xref target="RFC6997" /> and can not be restricted at all. This
            is a feature, not a bug.
          </t>
          <t>
            <xref target="RFC7416"/> deals with many other threats to LLNs
            not directly related to the use of IPv6-in-IPv6 headers, and this
            document does not change that analysis.
          </t>
          <t>
            Nodes within the LLN can use the IPv6-in-IPv6 mechanism to mount an
            attack on another part of the LLN, while disguising the origin of
            the attack.  The mechanism can even be abused to make it appear
            that the attack is coming from outside the LLN, and unless
            countered, this could be used to mount a Distributed Denial Of
            Service attack upon nodes elsewhere in the Internet. See <xref
            target="DDOS-KREBS" /> for an example of such attacks already
            seen in the real world.
          </t>
          <t>
            If an attack comes from inside of LLN, it can be alleviated with SAVI
            (Source Address Validation Improvement) using <xref target="RFC8505"/> with
            <xref target="I-D.ietf-6lo-ap-nd"/>. The attacker will not
            be able to source traffic with an address that is not registered, and the registration process
            checks for topological correctness. Notice that there is an L2 authentication
            in most of the cases.  If an attack comes from outside LLN IPv6-in-
            IPv6 can be used to hide inner routing headers, but by construction, the RH3 can typically only address nodes within the
            LLN.  That is, an RH3 with a CmprI less than 8 , should be considered an attack (see RFC6554, section 3).
          </t>
          <t>
            Nodes outside of the LLN will need to pass IPv6-in-IPv6 traffic
            through the RPL root to perform this attack. To counter, the RPL
            root SHOULD either restrict ingress of IPv6-in-IPv6 packets (the
            simpler solution), or it SHOULD walk the IP header extension chain until it can inspect the
            upper-layer-payload as described in <xref target="RFC7045" />.
            In particular, the RPL root SHOULD do <xref
            target="BCP38" /> processing on the source addresses of all IP
            headers that it examines in both directions.
          </t>
          <t>
            Note: there are some situations where a prefix will spread
            across multiple LLNs via mechanisms such as the one described in
            <xref target="I-D.ietf-6lo-backbone-router" />.
            In this case the BCP38 filtering needs to take this into account,
            either by exchanging detailed routing information on each LLN,
            or by moving the BCP38 filtering further towards the Internet,
            so that the details of the multiple LLNs do not matter.
          </t>

        </section>

        <section anchor="Acknowledgments" title="Acknowledgments">
           <t>
           This work is done thanks to the grant given by the StandICT.eu project.
           </t>
           <t>
            A special BIG thanks to C. M. Heard for the help with the <xref target="updateRFCs_section" />.
            Much of the redaction in that section is based on his comments.
           </t>
           <t>
           Additionally, the authors would like to acknowledge the review, feedback, and
           comments of (alphabetical order): Dominique Barthel, Robert Cragie, Simon Duquennoy, Ralph Droms,
           Cenk Gündogan, Rahul Jadhav, Benjamin Kaduk, Matthias Kovatsch, Gustavo Mercado, Subramanian Moonesamy,
           Marcela Orbiscay, Charlie Perkins, Cristian Perez, Alvaro Retana, Peter van der Stok,
           Xavier Vilajosana, Éric Vyncke and Thomas Watteyne.
           </t>
         </section>


       </middle>

 <back>

   <references title="Normative References">


     &RFC6553;
     &RFC6554;
     &RFC2119;
     &RFC6040;

     <?rfc include="reference.RFC.8174.xml" ?>

     <?rfc include="reference.RFC.8200.xml" ?>
     <?rfc include="reference.RFC.8025.xml" ?>

     <?rfc include="reference.RFC.8138.xml" ?>
     <?rfc include="reference.RFC.6282.xml" ?>

     &RFC6550;

     <reference  anchor='BCP38' target='https://www.rfc-editor.org/info/bcp38'>
     <front>
     <title>Network Ingress Filtering: Defeating Denial of Service Attacks which employ IP Source Address Spoofing</title>
     <author initials='P.' surname='Ferguson' fullname='P. Ferguson'><organization /></author>
     <author initials='D.' surname='Senie' fullname='D. Senie'><organization /></author>
     <date year='2000' month='May' />
     <abstract><t>This paper discusses a simple, effective, and straightforward method for using ingress traffic filtering to prohibit DoS (Denial of Service) attacks which use forged IP addresses to be propagated from 'behind' an Internet Service Provider's (ISP) aggregation point.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
     </front>
     <seriesInfo name='BCP' value='38'/>
     <seriesInfo name='RFC' value='2827'/>
     <seriesInfo name='DOI' value='10.17487/RFC2827'/>
     </reference>

     <?rfc include="reference.RFC.7045.xml" ?>

   </references>

   <references title="Informative References">

     <?rfc include="reference.RFC.0801.xml" ?>
     <?rfc include="reference.RFC.8504.xml" ?>

   <?rfc include="reference.I-D.ietf-6lo-ap-nd.xml"?>

    <?rfc include="reference.I-D.ietf-intarea-tunnels.xml"?>

   <?rfc include="reference.I-D.ietf-roll-unaware-leaves.xml" ?>

     &RFC6775;
     &RFC6437;
     &RFC7416;
     &RFC4443;
     &RFC7102;
     &RFC8180;
     &RFC2473;
     &RFC8505;
     &RFC2460;


     <?rfc include="reference.I-D.ietf-anima-autonomic-control-plane.xml" ?>
     <?rfc include="reference.RFC.5406.xml" ?>

     <?rfc include="reference.I-D.ietf-anima-bootstrapping-keyinfra.xml" ?>
     <?rfc include="reference.I-D.ietf-6tisch-dtsecurity-zerotouch-join.xml" ?>
     <?rfc include="reference.I-D.ietf-6lo-backbone-router.xml" ?>



     <?rfc include="reference.RFC.6997.xml" ?>


     <reference anchor="DDOS-KREBS" target="http://arstechnica.com/security/2016/09/botnet-of-145k-cameras-reportedly-deliver-internets-biggest-ddos-ever/">
       <front>
	 <title>Record-breaking DDoS reportedly delivered by >145k hacked cameras</title>
         <author initials="D." surname="Goodin"> <organization></organization> </author>
	 <date year="2016" month="September"/>
       </front>
     </reference>



     </references>
 </back>
</rfc>
